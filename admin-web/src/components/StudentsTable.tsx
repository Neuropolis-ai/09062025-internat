'use client';

import React from 'react';
import { useAdmin } from '../contexts/AdminContext';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  role: string;
  profileData?: {
    className?: string;
    cottage?: string;
    tokens?: number;
    tokensAccount?: number;
    tokensCredit?: number;
    phone?: string;
    membership?: string;
    positions?: string[];
    achievements?: string[];
  };
  isActive: boolean;
}

interface StudentsTableProps {
  onEdit: (student: User) => void;
  onTokens: (student: User) => void;
  onStudentClick?: (student: User) => void;
}

export default function StudentsTable({ onEdit, onTokens, onStudentClick }: StudentsTableProps) {
  const { students, loading, error, loadUsers, deleteUser } = useAdmin();

  const handleDelete = async (student: User) => {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ ${student.firstName} ${student.lastName}?`)) {
      try {
        await deleteUser(student.id);
        alert(`–£—á–µ–Ω–∏–∫ ${student.firstName} ${student.lastName} —É–¥–∞–ª–µ–Ω`);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞');
      }
    }
  };

  const handleStudentClick = (student: User) => {
    if (onStudentClick) {
      onStudentClick(student);
    } else {
      onEdit(student); // fallback –µ—Å–ª–∏ onStudentClick –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    }
  };

  const handleTokens = (student: User) => {
    const currentTokens = student.profileData?.tokens || student.profileData?.tokensAccount || 0;
    const action = prompt(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è ${student.firstName} ${student.lastName}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentTokens} —Ç–æ–∫–µ–Ω–æ–≤\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (+) –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è (-):`, '0');
    
    if (action !== null && action !== '') {
      const amount = parseInt(action);
      if (!isNaN(amount)) {
        // TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å updateUser –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        console.log('–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã:', { student, amount });
        alert('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
  const getTotalTokens = (student: User) => {
    const profileData = student.profileData || {};
    const tokensAccount = profileData.tokensAccount || 0;
    const tokensCredit = profileData.tokensCredit || 0;
    const tokens = profileData.tokens || 0;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏ –∫—Ä–µ–¥–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å—É–º–º—É, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º tokens
    if (tokensAccount > 0 || tokensCredit > 0) {
      return tokensAccount + tokensCredit;
    }
    return tokens;
  };

  if (loading) {
    return (
      <div className="p-8 text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
        <p className="mt-2 text-sm text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8 text-center">
        <p className="text-sm text-red-500 mb-4">{error}</p>
        <button
          onClick={loadUsers}
          className="admin-button-primary px-4 py-2 text-sm font-medium text-white"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y admin-border" style={{ borderColor: 'var(--divider)' }}>
        <thead style={{ backgroundColor: 'var(--background-light)' }}>
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              –§–∞–º–∏–ª–∏—è –ò–º—è
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              Email
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              –ö–ª–∞—Å—Å
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              –ö–æ—Ç—Ç–µ–¥–∂
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              –¢–æ–∫–µ–Ω—ã
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              –î–æ–ª–∂–Ω–æ—Å—Ç–∏
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              –°—Ç–∞—Ç—É—Å
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium admin-text-secondary uppercase tracking-wider">
              –î–µ–π—Å—Ç–≤–∏—è
            </th>
          </tr>
        </thead>
        <tbody className="admin-card divide-y" style={{ borderColor: 'var(--divider)' }}>
          {students.map((student: User) => (
            <tr key={student.id} className="hover:bg-gray-50 transition-colors cursor-pointer" onClick={() => handleStudentClick(student)}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm font-medium text-gray-900">
                  {student.lastName} {student.firstName}
                  {student.middleName && <div className="text-xs text-gray-500">{student.middleName}</div>}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {student.email}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                  {student.profileData?.className || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </span>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {student.profileData?.cottage || '–ù–µ —É–∫–∞–∑–∞–Ω'}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm font-medium text-gray-900">
                  {getTotalTokens(student)}
                </div>
                {student.profileData?.tokensAccount !== undefined && student.profileData?.tokensCredit !== undefined && (
                  <div className="text-xs text-gray-500">
                    –†: {student.profileData.tokensAccount} | –ö: {student.profileData.tokensCredit}
                  </div>
                )}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {student.profileData?.positions && student.profileData.positions.length > 0 ? (
                    <div className="max-w-32">
                      <div className="text-xs">
                        {student.profileData.positions.slice(0, 2).map((position: string, index: number) => (
                          <span key={index} className="inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs mr-1 mb-1">
                            {position}
                          </span>
                        ))}
                        {student.profileData.positions.length > 2 && (
                          <span className="text-gray-500">+{student.profileData.positions.length - 2}</span>
                        )}
                      </div>
                    </div>
                  ) : (
                    <span className="text-gray-400 text-xs">–ù–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π</span>
                  )}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  student.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                }`}>
                  {student.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                </span>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <div className="flex items-center space-x-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onEdit(student);
                    }}
                    className="text-gray-400 hover:text-gray-600 transition-colors"
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    <span className="text-lg">‚úèÔ∏è</span>
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDelete(student);
                    }}
                    className="text-gray-400 hover:text-red-600 transition-colors"
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    <span className="text-lg">üóëÔ∏è</span>
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onTokens(student);
                    }}
                    className="text-gray-400 hover:text-green-600 transition-colors"
                    title="–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã"
                  >
                    <span className="text-lg">üí∞</span>
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
} 