'use client';

import React, { useState } from 'react';
import Modal from './ui/Modal';

interface TransactionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (transactionData: TransactionFormData) => void;
}

interface TransactionFormData {
  studentName: string;
  type: 'credit' | 'debit';
  amount: number;
  description: string;
  category: string;
}

// –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç –∏–∑ API)
const students = [
  '–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
  '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞', 
  '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
  '–ö–æ–∑–ª–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞',
  '–ú–æ—Ä–æ–∑–æ–≤ –ê—Ä—Ç–µ–º –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
];

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
const creditCategories = [
  '–ü–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ —É—á–µ–±—É',
  '–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ',
  '–ü–æ–±–µ–¥–∞ –≤ –æ–ª–∏–º–ø–∏–∞–¥–µ',
  '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞',
  '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
  '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
  '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
  '–ü—Ä–æ—á–µ–µ'
];

const debitCategories = [
  '–ü–æ–∫—É–ø–∫–∞ –≤ L-shop',
  '–û–ø–ª–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
  '–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ',
  '–ü–æ–∫—É–ø–∫–∞ –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤',
  '–£—Å–ª—É–≥–∏ —Å—Ç–æ–ª–æ–≤–æ–π',
  '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
  '–ü—Ä–æ—á–µ–µ'
];

export default function TransactionModal({ isOpen, onClose, onSave }: TransactionModalProps) {
  const [formData, setFormData] = useState<TransactionFormData>({
    studentName: '',
    type: 'credit',
    amount: 0,
    description: '',
    category: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.studentName) {
      newErrors.studentName = '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞';
    }
    if (formData.amount <= 0) {
      newErrors.amount = '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }
    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.category) {
      newErrors.category = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      onSave(formData);
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        studentName: '',
        type: 'credit',
        amount: 0,
        description: '',
        category: ''
      });
      setErrors({});
      onClose();
    }
  };

  const handleCancel = () => {
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    setFormData({
      studentName: '',
      type: 'credit',
      amount: 0,
      description: '',
      category: ''
    });
    setErrors({});
    onClose();
  };

  const handleTypeChange = (newType: 'credit' | 'debit') => {
    setFormData(prev => ({
      ...prev,
      type: newType,
      category: '' // –°–±—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
    }));
  };

  const currentCategories = formData.type === 'credit' ? creditCategories : debitCategories;

  return (
    <Modal isOpen={isOpen} onClose={handleCancel} title="–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è" size="md">
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ */}
        <div>
          <label htmlFor="studentName" className="block text-sm font-medium text-gray-700 mb-1">
            –£—á–µ–Ω–∏–∫ *
          </label>
          <select
            id="studentName"
            className={`admin-input w-full ${errors.studentName ? 'border-red-500' : ''}`}
            value={formData.studentName}
            onChange={(e) => setFormData(prev => ({ ...prev, studentName: e.target.value }))}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞</option>
            {students.map(student => (
              <option key={student} value={student}>{student}</option>
            ))}
          </select>
          {errors.studentName && <p className="text-red-500 text-xs mt-1">{errors.studentName}</p>}
        </div>

        {/* –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ *
          </label>
          <div className="grid grid-cols-2 gap-3">
            <button
              type="button"
              onClick={() => handleTypeChange('credit')}
              className={`p-3 rounded-md border text-sm font-medium transition-colors ${
                formData.type === 'credit'
                  ? 'border-green-500 bg-green-50 text-green-700'
                  : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'
              }`}
            >
              üí∞ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            </button>
            <button
              type="button"
              onClick={() => handleTypeChange('debit')}
              className={`p-3 rounded-md border text-sm font-medium transition-colors ${
                formData.type === 'debit'
                  ? 'border-red-500 bg-red-50 text-red-700'
                  : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'
              }`}
            >
              üí∏ –°–ø–∏—Å–∞–Ω–∏–µ
            </button>
          </div>
        </div>

        {/* –°—É–º–º–∞ */}
        <div>
          <label htmlFor="amount" className="block text-sm font-medium text-gray-700 mb-1">
            –°—É–º–º–∞ (—Ç–æ–∫–µ–Ω—ã) *
          </label>
          <input
            type="number"
            id="amount"
            min="1"
            className={`admin-input w-full ${errors.amount ? 'border-red-500' : ''}`}
            value={formData.amount || ''}
            onChange={(e) => setFormData(prev => ({ ...prev, amount: parseInt(e.target.value) || 0 }))}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
          />
          {errors.amount && <p className="text-red-500 text-xs mt-1">{errors.amount}</p>}
        </div>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
        <div>
          <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
          </label>
          <select
            id="category"
            className={`admin-input w-full ${errors.category ? 'border-red-500' : ''}`}
            value={formData.category}
            onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
            {currentCategories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
          {errors.category && <p className="text-red-500 text-xs mt-1">{errors.category}</p>}
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
            –û–ø–∏—Å–∞–Ω–∏–µ *
          </label>
          <textarea
            id="description"
            rows={3}
            className={`admin-input w-full resize-none ${errors.description ? 'border-red-500' : ''}`}
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
          />
          {errors.description && <p className="text-red-500 text-xs mt-1">{errors.description}</p>}
        </div>

        {/* –ü—Ä–µ–≤—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
        {formData.studentName && formData.amount > 0 && (
          <div className="p-4 rounded-md" style={{ backgroundColor: 'var(--background-light)' }}>
            <h4 className="text-sm font-medium text-gray-700 mb-2">–ü—Ä–µ–≤—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</h4>
            <div className="text-sm text-gray-600">
              <p><strong>–£—á–µ–Ω–∏–∫:</strong> {formData.studentName}</p>
              <p><strong>–û–ø–µ—Ä–∞—Ü–∏—è:</strong> {formData.type === 'credit' ? 'üí∞ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ' : 'üí∏ –°–ø–∏—Å–∞–Ω–∏–µ'}</p>
              <p><strong>–°—É–º–º–∞:</strong> 
                <span className={formData.type === 'credit' ? 'text-green-600' : 'text-red-600'}>
                  {formData.type === 'credit' ? '+' : '-'}{formData.amount.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤
                </span>
              </p>
              {formData.category && <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {formData.category}</p>}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            onClick={handleCancel}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border admin-border rounded-md hover:bg-gray-50 transition-colors"
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </button>
          <button
            type="submit"
            className="admin-button-primary px-4 py-2 text-sm font-medium rounded-md"
            style={{ backgroundColor: 'var(--primary-burgundy)' }}
          >
            –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          </button>
        </div>
      </form>
    </Modal>
  );
} 