'use client';

import React, { useState, useEffect } from 'react';
import Modal from './ui/Modal';

interface AuctionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (lotData: LotFormData) => void;
  editLot?: AuctionLot | null;
}

interface LotFormData {
  title: string;
  description: string;
  startingPrice: number;
  minBidIncrement: number;
  startTime: string;
  endTime: string;
  imageUrl?: string;
}

interface AuctionLot {
  id: string;
  title: string;
  description: string;
  startingPrice: string;
  currentPrice: string;
  imageUrl?: string;
  status: 'ACTIVE' | 'COMPLETED' | 'DRAFT' | 'CANCELLED';
  startTime: string;
  endTime: string;
  minBidIncrement: string;
  creator: {
    id: string;
    firstName: string;
    lastName: string;
  };
  winner?: {
    id: string;
    firstName: string;
    lastName: string;
  };
  _count: {
    bids: number;
  };
}

const categories = ["–û–¥–µ–∂–¥–∞", "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", "–°—É–≤–µ–Ω–∏—Ä—ã", "–ö–Ω–∏–≥–∏", "–ò–≥—Ä—ã", "–ü—Ä–æ—á–µ–µ"];
const sellers = ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "–£—á–µ–±–Ω–∞—è —á–∞—Å—Ç—å", "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–ª—É–±", "–°–æ–≤–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±"];
const availableEmojis = ["üëï", "üìù", "‚òï", "üìö", "üé≤", "üèÖ", "üéñÔ∏è", "üñäÔ∏è", "üìì", "üìî", "üç´", "üßÉ", "üíº", "üé®", "üé≠"];

export default function AuctionModal({ isOpen, onClose, onSave, editLot }: AuctionModalProps) {
  const [formData, setFormData] = useState<LotFormData>({
    title: '',
    description: '',
    startingPrice: 0,
    minBidIncrement: 10,
    startTime: '',
    endTime: '',
    imageUrl: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (editLot) {
      setFormData({
        title: editLot.title,
        description: editLot.description,
        startingPrice: parseInt(editLot.startingPrice),
        minBidIncrement: parseInt(editLot.minBidIncrement),
        startTime: editLot.startTime.slice(0, 16), // –¥–ª—è datetime-local
        endTime: editLot.endTime.slice(0, 16), // –¥–ª—è datetime-local
        imageUrl: editLot.imageUrl || ''
      });
    } else {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const now = new Date();
      const startTime = new Date(now.getTime() + 60 * 60 * 1000); // —á–µ—Ä–µ–∑ —á–∞—Å
      const endTime = new Date(now.getTime() + 25 * 60 * 60 * 1000); // —á–µ—Ä–µ–∑ 25 —á–∞—Å–æ–≤
      
      setFormData({
        title: '',
        description: '',
        startingPrice: 0,
        minBidIncrement: 10,
        startTime: startTime.toISOString().slice(0, 16),
        endTime: endTime.toISOString().slice(0, 16),
        imageUrl: ''
      });
    }
    setErrors({});
  }, [editLot, isOpen]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (formData.startingPrice <= 0) {
      newErrors.startingPrice = '–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }
    if (formData.minBidIncrement <= 0) {
      newErrors.minBidIncrement = '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }
    if (!formData.startTime) {
      newErrors.startTime = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.endTime) {
      newErrors.endTime = '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (formData.startTime && formData.endTime && new Date(formData.startTime) >= new Date(formData.endTime)) {
      newErrors.endTime = '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
      const submitData = {
        ...formData,
        startTime: new Date(formData.startTime).toISOString(),
        endTime: new Date(formData.endTime).toISOString()
      };
      onSave(submitData);
      handleCancel();
    }
  };

  const handleCancel = () => {
    const now = new Date();
    const startTime = new Date(now.getTime() + 60 * 60 * 1000);
    const endTime = new Date(now.getTime() + 25 * 60 * 60 * 1000);
    
    setFormData({
      title: '',
      description: '',
      startingPrice: 0,
      minBidIncrement: 10,
      startTime: startTime.toISOString().slice(0, 16),
      endTime: endTime.toISOString().slice(0, 16),
      imageUrl: ''
    });
    setErrors({});
    onClose();
  };

  const isEditing = !!editLot;

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={handleCancel} 
      title={isEditing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç" : "–°–æ–∑–¥–∞—Ç—å –ª–æ—Ç"} 
      size="lg"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
              –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ *
            </label>
            <input
              type="text"
              id="title"
              className={`admin-input w-full ${errors.title ? 'border-red-500' : ''}`}
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞"
            />
            {errors.title && <p className="text-red-500 text-xs mt-1">{errors.title}</p>}
          </div>

          <div>
            <label htmlFor="imageUrl" className="block text-sm font-medium text-gray-700 mb-1">
              URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            </label>
            <input
              type="url"
              id="imageUrl"
              className="admin-input w-full"
              value={formData.imageUrl || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, imageUrl: e.target.value }))}
              placeholder="https://example.com/image.jpg"
            />
          </div>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
            –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ *
          </label>
          <textarea
            id="description"
            rows={3}
            className={`admin-input w-full resize-none ${errors.description ? 'border-red-500' : ''}`}
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞"
          />
          {errors.description && <p className="text-red-500 text-xs mt-1">{errors.description}</p>}
        </div>

        {/* –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="startingPrice" className="block text-sm font-medium text-gray-700 mb-1">
              –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ (—Ç–æ–∫–µ–Ω—ã) *
            </label>
            <input
              type="number"
              id="startingPrice"
              min="1"
              className={`admin-input w-full ${errors.startingPrice ? 'border-red-500' : ''}`}
              value={formData.startingPrice || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, startingPrice: parseInt(e.target.value) || 0 }))}
              placeholder="–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö"
            />
            {errors.startingPrice && <p className="text-red-500 text-xs mt-1">{errors.startingPrice}</p>}
          </div>

          <div>
            <label htmlFor="minBidIncrement" className="block text-sm font-medium text-gray-700 mb-1">
              –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏ *
            </label>
            <input
              type="number"
              id="minBidIncrement"
              min="1"
              className={`admin-input w-full ${errors.minBidIncrement ? 'border-red-500' : ''}`}
              value={formData.minBidIncrement || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, minBidIncrement: parseInt(e.target.value) || 0 }))}
              placeholder="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏"
            />
            {errors.minBidIncrement && <p className="text-red-500 text-xs mt-1">{errors.minBidIncrement}</p>}
          </div>
        </div>

        {/* –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="startTime" className="block text-sm font-medium text-gray-700 mb-1">
              –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ *
            </label>
            <input
              type="datetime-local"
              id="startTime"
              className={`admin-input w-full ${errors.startTime ? 'border-red-500' : ''}`}
              value={formData.startTime}
              onChange={(e) => setFormData(prev => ({ ...prev, startTime: e.target.value }))}
            />
            {errors.startTime && <p className="text-red-500 text-xs mt-1">{errors.startTime}</p>}
          </div>

          <div>
            <label htmlFor="endTime" className="block text-sm font-medium text-gray-700 mb-1">
              –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è *
            </label>
            <input
              type="datetime-local"
              id="endTime"
              className={`admin-input w-full ${errors.endTime ? 'border-red-500' : ''}`}
              value={formData.endTime}
              onChange={(e) => setFormData(prev => ({ ...prev, endTime: e.target.value }))}
            />
            {errors.endTime && <p className="text-red-500 text-xs mt-1">{errors.endTime}</p>}
          </div>
        </div>

        {/* –ü—Ä–µ–≤—å—é –ª–æ—Ç–∞ */}
        {formData.title && formData.startingPrice > 0 && (
          <div className="p-4 rounded-md" style={{ backgroundColor: 'var(--background-light)' }}>
            <h4 className="text-sm font-medium text-gray-700 mb-3">–ü—Ä–µ–≤—å—é –ª–æ—Ç–∞:</h4>
            <div className="admin-card">
              <div className="p-4">
                <div className="flex justify-between items-start mb-4">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è' : '–ù–æ–≤—ã–π'}
                  </span>
                  {formData.startTime && formData.endTime && (
                    <span className="text-xs admin-text-secondary">
                      {new Date(formData.startTime).toLocaleDateString('ru-RU')} - {new Date(formData.endTime).toLocaleDateString('ru-RU')}
                    </span>
                  )}
                </div>

                <div className="flex justify-center mb-4">
                  <div className="w-16 h-16 rounded-lg flex items-center justify-center text-4xl"
                       style={{ backgroundColor: 'white' }}>
                    {formData.imageUrl ? (
                      <img src={formData.imageUrl} alt={formData.title} className="w-full h-full object-cover rounded-lg" />
                    ) : (
                      'üéØ'
                    )}
                  </div>
                </div>
                
                <div className="text-center">
                  <h5 className="text-lg font-medium text-gray-900 mb-1">{formData.title}</h5>
                  <p className="text-sm admin-text-secondary mb-3">{formData.description}</p>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="admin-text-secondary">–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                      <span className="font-bold" style={{ color: 'var(--primary-burgundy)' }}>
                        {formData.startingPrice} —Ç–æ–∫–µ–Ω–æ–≤
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="admin-text-secondary">–®–∞–≥ —Å—Ç–∞–≤–∫–∏:</span>
                      <span className="font-medium">{formData.minBidIncrement} —Ç–æ–∫–µ–Ω–æ–≤</span>
                    </div>
                    {formData.startTime && (
                      <div className="flex justify-between text-sm">
                        <span className="admin-text-secondary">–ù–∞—á–∞–ª–æ:</span>
                        <span className="font-medium">{new Date(formData.startTime).toLocaleString('ru-RU')}</span>
                      </div>
                    )}
                    {formData.endTime && (
                      <div className="flex justify-between text-sm">
                        <span className="admin-text-secondary">–û–∫–æ–Ω—á–∞–Ω–∏–µ:</span>
                        <span className="font-medium">{new Date(formData.endTime).toLocaleString('ru-RU')}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={handleCancel}
            className="admin-button-secondary px-4 py-2 text-sm font-medium rounded-md"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            className="admin-button-primary px-4 py-2 text-sm font-medium rounded-md"
            style={{ backgroundColor: 'var(--primary-burgundy)' }}
          >
            {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –ª–æ—Ç'}
          </button>
        </div>
      </form>
    </Modal>
  );
} 