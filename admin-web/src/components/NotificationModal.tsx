'use client';

import React, { useState, useEffect } from 'react';

interface Notification {
  id: string;
  title: string;
  content: string;
  type: 'GENERAL' | 'SYSTEM' | 'ACHIEVEMENT' | 'TRANSACTION' | 'AUCTION' | 'CONTRACT';
  isGlobal: boolean;
  createdAt: string;
  updatedAt: string;
  userNotifications: UserNotification[];
  _count: {
    userNotifications: number;
  };
}

interface UserNotification {
  id: string;
  userId: string;
  notificationId: string;
  isRead: boolean;
  readAt: string | null;
  createdAt: string;
  user?: {
    id: string;
    firstName: string;
    lastName: string;
  };
}

interface NotificationFormData {
  title: string;
  content: string;
  type: 'GENERAL' | 'SYSTEM' | 'ACHIEVEMENT' | 'TRANSACTION' | 'AUCTION' | 'CONTRACT';
  isGlobal: boolean;
  userIds?: string[];
}

interface NotificationModalProps {
  isOpen: boolean;
  onClose: () => void;
  notification?: Notification | null;
  onSave: (data: NotificationFormData) => void;
}

export default function NotificationModal({ isOpen, onClose, notification, onSave }: NotificationModalProps) {
  const [formData, setFormData] = useState<NotificationFormData>({
    title: '',
    content: '',
    type: 'GENERAL',
    isGlobal: true,
    userIds: []
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [showPreview, setShowPreview] = useState(false);

  useEffect(() => {
    if (notification) {
      setFormData({
        title: notification.title,
        content: notification.content,
        type: notification.type,
        isGlobal: notification.isGlobal,
        userIds: []
      });
    } else {
      setFormData({
        title: '',
        content: '',
        type: 'GENERAL',
        isGlobal: true,
        userIds: []
      });
    }
    setErrors({});
  }, [notification, isOpen]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    if (!formData.content.trim()) {
      newErrors.content = '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.isGlobal && (!formData.userIds || formData.userIds.length === 0)) {
      newErrors.userIds = '–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      onSave(formData);
      onClose();
    }
  };

  const handleInputChange = (field: keyof NotificationFormData, value: string | boolean | string[]) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'GENERAL': return 'üì¢';
      case 'SYSTEM': return '‚öôÔ∏è';
      case 'ACHIEVEMENT': return 'üèÜ';
      case 'TRANSACTION': return 'üí∞';
      case 'AUCTION': return 'üî®';
      case 'CONTRACT': return 'üìÑ';
      default: return 'üì¢';
    }
  };

  const getTypeText = (type: string) => {
    switch (type) {
      case 'GENERAL': return '–û–±—â–µ–µ';
      case 'SYSTEM': return '–°–∏—Å—Ç–µ–º–Ω–æ–µ';
      case 'ACHIEVEMENT': return '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
      case 'TRANSACTION': return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è';
      case 'AUCTION': return '–ê—É–∫—Ü–∏–æ–Ω';
      case 'CONTRACT': return '–ö–æ–Ω—Ç—Ä–∞–∫—Ç';
      default: return type;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'GENERAL': return 'bg-blue-100 text-blue-800';
      case 'SYSTEM': return 'bg-gray-100 text-gray-800';
      case 'ACHIEVEMENT': return 'bg-green-100 text-green-800';
      case 'TRANSACTION': return 'bg-yellow-100 text-yellow-800';
      case 'AUCTION': return 'bg-purple-100 text-purple-800';
      case 'CONTRACT': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeDescription = (type: string) => {
    switch (type) {
      case 'GENERAL': return '–û–±—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
      case 'SYSTEM': return '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
      case 'ACHIEVEMENT': return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö';
      case 'TRANSACTION': return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö';
      case 'AUCTION': return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞—É–∫—Ü–∏–æ–Ω–∞—Ö';
      case 'CONTRACT': return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö';
      default: return '';
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose}></div>

        <span className="hidden sm:inline-block sm:align-middle sm:h-screen">&#8203;</span>

        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
          <form onSubmit={handleSubmit}>
            <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
              <div className="sm:flex sm:items-start">
                <div className="w-full">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
                  <div className="mb-6 border-b pb-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <div className="w-10 h-10 rounded-full flex items-center justify-center mr-3" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                          <span className="text-white text-xl">üì¢</span>
                        </div>
                        <div>
                          <h3 className="text-lg leading-6 font-medium text-gray-900">
                            {notification ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' : '–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}
                          </h3>
                          <p className="text-sm admin-text-secondary">
                            {notification ? '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
                          </p>
                        </div>
                      </div>
                      <button
                        type="button"
                        onClick={onClose}
                        className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                      >
                        <span className="text-xl">‚úï</span>
                      </button>
                    </div>
                  </div>

                  {/* –¢–∞–±—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–æ—Ä–º–æ–π –∏ –ø—Ä–µ–≤—å—é */}
                  <div className="flex border-b mb-6">
                    <button
                      type="button"
                      className={`px-4 py-2 font-medium text-sm ${!showPreview ? 'border-b-2 text-blue-600' : 'text-gray-500'}`}
                      style={{ borderColor: !showPreview ? 'var(--primary-burgundy)' : 'transparent' }}
                      onClick={() => setShowPreview(false)}
                    >
                      üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    </button>
                    <button
                      type="button"
                      className={`px-4 py-2 font-medium text-sm ${showPreview ? 'border-b-2 text-blue-600' : 'text-gray-500'}`}
                      style={{ borderColor: showPreview ? 'var(--primary-burgundy)' : 'transparent' }}
                      onClick={() => setShowPreview(true)}
                    >
                      üëÅÔ∏è –ü—Ä–µ–≤—å—é
                    </button>
                  </div>

                  {!showPreview ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                      <div className="space-y-4">
                        <h4 className="font-medium text-gray-900 mb-3">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                        
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                        <div>
                          <label className="block text-sm font-medium admin-text-secondary mb-1">
                            –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è *
                          </label>
                          <input
                            type="text"
                            className={`admin-input w-full ${errors.title ? 'border-red-500' : ''}`}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            value={formData.title}
                            onChange={(e) => handleInputChange('title', e.target.value)}
                          />
                          {errors.title && <p className="text-red-500 text-xs mt-1">{errors.title}</p>}
                        </div>

                        {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
                        <div>
                          <label className="block text-sm font-medium admin-text-secondary mb-1">
                            –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è *
                          </label>
                          <textarea
                            className={`admin-input w-full h-32 ${errors.content ? 'border-red-500' : ''}`}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            value={formData.content}
                            onChange={(e) => handleInputChange('content', e.target.value)}
                            rows={4}
                          />
                          {errors.content && <p className="text-red-500 text-xs mt-1">{errors.content}</p>}
                        </div>

                        {/* –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                        <div>
                          <label className="block text-sm font-medium admin-text-secondary mb-1">
                            –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                          </label>
                          <select
                            className="admin-input w-full"
                            value={formData.type}
                            onChange={(e) => handleInputChange('type', e.target.value as any)}
                          >
                            <option value="GENERAL">üì¢ –û–±—â–µ–µ</option>
                            <option value="SYSTEM">‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ</option>
                            <option value="ACHIEVEMENT">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ</option>
                            <option value="TRANSACTION">üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</option>
                            <option value="AUCTION">üî® –ê—É–∫—Ü–∏–æ–Ω</option>
                            <option value="CONTRACT">üìÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç</option>
                          </select>
                          <p className="text-xs admin-text-secondary mt-1">
                            {getTypeDescription(formData.type)}
                          </p>
                        </div>
                      </div>

                      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                      <div className="space-y-4">
                        <h4 className="font-medium text-gray-900 mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏</h4>

                        {/* –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                        <div>
                          <label className="block text-sm font-medium admin-text-secondary mb-2">
                            –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏
                          </label>
                          <div className="space-y-2">
                            <label className="flex items-center">
                              <input
                                type="radio"
                                name="sendType"
                                className="mr-2"
                                checked={formData.isGlobal}
                                onChange={() => handleInputChange('isGlobal', true)}
                              />
                              <span className="text-sm">üåê –ì–ª–æ–±–∞–ª—å–Ω–æ–µ (–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)</span>
                            </label>
                            <label className="flex items-center">
                              <input
                                type="radio"
                                name="sendType"
                                className="mr-2"
                                checked={!formData.isGlobal}
                                onChange={() => handleInputChange('isGlobal', false)}
                              />
                              <span className="text-sm">üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ (–≤—ã–±–æ—Ä–æ—á–Ω–æ)</span>
                            </label>
                          </div>
                        </div>

                        {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                        {!formData.isGlobal && (
                          <div>
                            <label className="block text-sm font-medium admin-text-secondary mb-1">
                              ID –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π *
                            </label>
                            <textarea
                              className={`admin-input w-full h-24 ${errors.userIds ? 'border-red-500' : ''}`}
                              placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: user1, user2, user3)"
                              value={formData.userIds?.join(', ') || ''}
                              onChange={(e) => {
                                const userIds = e.target.value.split(',').map(id => id.trim()).filter(id => id);
                                handleInputChange('userIds', userIds);
                              }}
                              rows={3}
                            />
                            {errors.userIds && <p className="text-red-500 text-xs mt-1">{errors.userIds}</p>}
                            <p className="text-xs admin-text-secondary mt-1">
                              –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                            </p>
                          </div>
                        )}

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
                        <div className="bg-blue-50 p-4 rounded-lg">
                          <h5 className="font-medium text-blue-900 mb-2">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
                          <ul className="text-sm text-blue-800 space-y-1">
                            <li>‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</li>
                            <li>‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</li>
                            <li>‚Ä¢ –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ</li>
                            <li>‚Ä¢ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  ) : (
                    /* –ü—Ä–µ–≤—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
                    <div className="space-y-4">
                      <h4 className="font-medium text-gray-900 mb-4">–ü—Ä–µ–≤—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                      
                      <div className={`border rounded-lg p-4 ${formData.isGlobal ? 'border-blue-300 bg-blue-50' : 'border-gray-300'}`}>
                        <div className="flex items-start space-x-3">
                          <span className="text-2xl">{getTypeIcon(formData.type)}</span>
                          <div className="flex-1">
                            <div className="flex items-center space-x-3 mb-2">
                              <h4 className="text-lg font-medium text-gray-900">
                                {formData.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}
                                {formData.isGlobal && <span className="ml-2 text-blue-600">üåê</span>}
                              </h4>
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(formData.type)}`}>
                                {getTypeText(formData.type)}
                              </span>
                              {formData.isGlobal ? (
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                  –ì–ª–æ–±–∞–ª—å–Ω–æ–µ
                                </span>
                              ) : (
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                  –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ
                                </span>
                              )}
                            </div>
                            
                            <p className="text-sm admin-text-secondary mb-3">
                              {formData.content || '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å'}
                            </p>

                            <div className="grid grid-cols-2 gap-4 text-sm admin-text-secondary">
                              <div>
                                <span className="font-medium">–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</span>
                                <div>
                                  {formData.isGlobal 
                                    ? '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' 
                                    : `${formData.userIds?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
                                  }
                                </div>
                              </div>
                              <div>
                                <span className="font-medium">–°–æ–∑–¥–∞–Ω–æ:</span>
                                <div>{new Date().toLocaleDateString('ru-RU')}</div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      {!formData.isGlobal && formData.userIds && formData.userIds.length > 0 && (
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <h5 className="font-medium text-gray-900 mb-2">–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</h5>
                          <div className="flex flex-wrap gap-2">
                            {formData.userIds.map((userId, index) => (
                              <span key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-200 text-gray-800">
                                {userId}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
              <button
                type="submit"
                className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 text-base font-medium text-white sm:ml-3 sm:w-auto sm:text-sm transition-colors"
                style={{ backgroundColor: 'var(--primary-burgundy)' }}
                onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'var(--primary-burgundy-hover)'}
                onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'var(--primary-burgundy)'}
              >
                {notification ? '–û–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' : '–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}
              </button>
              <button
                type="button"
                className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm transition-colors"
                onClick={onClose}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
} 