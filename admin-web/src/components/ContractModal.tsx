'use client';

import { useState, useEffect } from 'react';

interface Task {
  id: string;
  title: string;
  description: string;
  category: string;
  price: number;
  minBid: number;
  deadline: string;
  department: string;
  priority: 'low' | 'medium' | 'high';
}

interface TaskFormData {
  title: string;
  description: string;
  category: string;
  price: number;
  minBid: number;
  deadline: string;
  department: string;
  priority: 'low' | 'medium' | 'high';
}

interface ContractModalProps {
  isOpen: boolean;
  onClose: () => void;
  task?: Task | null;
  onSave: (data: TaskFormData) => void;
}

export default function ContractModal({ isOpen, onClose, task, onSave }: ContractModalProps) {
  const [formData, setFormData] = useState<TaskFormData>({
    title: '',
    description: '',
    category: '',
    price: 0,
    minBid: 0,
    deadline: '',
    department: '',
    priority: 'medium'
  });

  const categories = [
    '–°–ø–æ—Ä—Ç',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 
    '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
    '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ',
    '–£–±–æ—Ä–∫–∞',
    '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
    '–î–µ–∂—É—Ä—Å—Ç–≤–æ'
  ];

  const departments = [
    '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–Ω—ã–π –æ—Ç–¥–µ–ª',
    '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
    '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª',
    '–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª',
    '–£—á–µ–±–Ω—ã–π –æ—Ç–¥–µ–ª',
    '–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª',
    '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª'
  ];

  useEffect(() => {
    if (task) {
      setFormData({
        title: task.title,
        description: task.description,
        category: task.category,
        price: task.price,
        minBid: task.minBid,
        deadline: task.deadline,
        department: task.department,
        priority: task.priority
      });
    } else {
      setFormData({
        title: '',
        description: '',
        category: '',
        price: 0,
        minBid: 0,
        deadline: '',
        department: '',
        priority: 'medium'
      });
    }
  }, [task]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.title.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è');
      return;
    }
    
    if (!formData.description.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è');
      return;
    }
    
    if (!formData.category) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return;
    }
    
    if (!formData.department) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª');
      return;
    }
    
    if (formData.price <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å');
      return;
    }
    
    if (formData.minBid <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É');
      return;
    }
    
    if (formData.minBid > formData.price) {
      alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏');
      return;
    }
    
    if (!formData.deadline) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω');
      return;
    }
    
    const deadline = new Date(formData.deadline);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (deadline <= today) {
      alert('–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
      return;
    }

    onSave(formData);
    onClose();
  };

  const handleInputChange = (field: keyof TaskFormData, value: string | number) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const formatDate = (date: Date) => {
    return date.toISOString().split('T')[0];
  };

  const getMinDate = () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return formatDate(tomorrow);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-20 mx-auto p-5 border w-11/12 max-w-2xl shadow-lg rounded-md admin-card">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-medium text-gray-900">
            {task ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'}
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <span className="text-2xl">√ó</span>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium admin-text-secondary mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è *
            </label>
            <input
              type="text"
              required
              className="admin-input w-full"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π –∑–∞—Ä—è–¥–∫–∏"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
            />
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium admin-text-secondary mb-2">
              –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è *
            </label>
            <textarea
              required
              rows={4}
              className="admin-input w-full"
              placeholder="–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å..."
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
            />
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –û—Ç–¥–µ–ª */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
              </label>
              <select
                required
                className="admin-input w-full"
                value={formData.category}
                onChange={(e) => handleInputChange('category', e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª *
              </label>
              <select
                required
                className="admin-input w-full"
                value={formData.department}
                onChange={(e) => handleInputChange('department', e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª</option>
                {departments.map(department => (
                  <option key={department} value={department}>{department}</option>
                ))}
              </select>
            </div>
          </div>

          {/* –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å (L-Coin) *
              </label>
              <input
                type="number"
                required
                min="1"
                step="1"
                className="admin-input w-full"
                placeholder="25"
                value={formData.price || ''}
                onChange={(e) => handleInputChange('price', parseInt(e.target.value) || 0)}
              />
              <p className="text-xs admin-text-secondary mt-1">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (L-Coin) *
              </label>
              <input
                type="number"
                required
                min="1"
                step="1"
                className="admin-input w-full"
                placeholder="15"
                value={formData.minBid || ''}
                onChange={(e) => handleInputChange('minBid', parseInt(e.target.value) || 0)}
              />
              <p className="text-xs admin-text-secondary mt-1">
                –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–¥–∞—á–∏ –æ—Ç–∫–ª–∏–∫–∞
              </p>
            </div>
          </div>

          {/* –î–µ–¥–ª–∞–π–Ω –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                üìÖ –î–µ–¥–ª–∞–π–Ω *
              </label>
              <input
                type="date"
                required
                min={getMinDate()}
                className="admin-input w-full"
                value={formData.deadline}
                onChange={(e) => handleInputChange('deadline', e.target.value)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
              </label>
              <select
                className="admin-input w-full"
                value={formData.priority}
                onChange={(e) => handleInputChange('priority', e.target.value as 'low' | 'medium' | 'high')}
              >
                <option value="low">–ù–∏–∑–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
              </select>
            </div>
          </div>

          {/* –ü—Ä–µ–≤—å—é */}
          {formData.title && formData.price && formData.minBid && (
            <div className="p-4 rounded-lg" style={{ backgroundColor: 'var(--background-gray)' }}>
              <h4 className="text-sm font-medium text-gray-900 mb-2">–ü—Ä–µ–≤—å—é –∑–∞–¥–∞–Ω–∏—è</h4>
              <div className="space-y-2 text-sm">
                <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {formData.title}</p>
                {formData.category && <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {formData.category}</p>}
                {formData.department && <p><strong>–û—Ç–¥–µ–ª:</strong> {formData.department}</p>}
                <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {formData.price} L-Coin</p>
                <p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</strong> {formData.minBid} L-Coin</p>
                {formData.deadline && (
                  <p><strong>–î–µ–¥–ª–∞–π–Ω:</strong> {new Date(formData.deadline).toLocaleDateString('ru-RU')}</p>
                )}
                <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> {
                  formData.priority === 'low' ? '–ù–∏–∑–∫–∏–π' :
                  formData.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–í—ã—Å–æ–∫–∏–π'
                }</p>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-end space-x-4 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2"
              style={{ 
                borderColor: 'var(--divider)',
                color: 'var(--text-secondary)'
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="admin-button-primary px-4 py-2 text-sm font-medium text-white rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2"
              style={{ backgroundColor: 'var(--primary-burgundy)' }}
            >
              {task ? '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
} 