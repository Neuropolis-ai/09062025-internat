'use client';

import { useState, useEffect } from 'react';

interface Contract {
  id: string;
  title: string;
  description: string;
  rewardAmount: number;
  requirements?: string;
  category: string;
  status: 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';
  deadline?: string;
  maxParticipants: number;
  createdAt: string;
  creator: {
    id: string;
    firstName: string;
    lastName: string;
  };
  _count: {
    bids: number;
  };
}

interface ContractFormData {
  title: string;
  description: string;
  category: string;
  rewardAmount: number;
  requirements?: string;
  deadline?: string;
  maxParticipants: number;
}

interface ContractModalProps {
  isOpen: boolean;
  onClose: () => void;
  contract?: Contract | null;
  onSave: (data: ContractFormData) => void;
}

export default function ContractModal({ isOpen, onClose, contract, onSave }: ContractModalProps) {
  const [formData, setFormData] = useState<ContractFormData>({
    title: '',
    description: '',
    category: '',
    rewardAmount: 0,
    requirements: '',
    deadline: '',
    maxParticipants: 1
  });

  const categories = [
    '–°–ø–æ—Ä—Ç',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 
    '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
    '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ',
    '–£–±–æ—Ä–∫–∞',
    '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
    '–î–µ–∂—É—Ä—Å—Ç–≤–æ'
  ];

  useEffect(() => {
    if (contract) {
      setFormData({
        title: contract.title,
        description: contract.description,
        category: contract.category,
        rewardAmount: contract.rewardAmount,
        requirements: contract.requirements || '',
        deadline: contract.deadline ? contract.deadline.slice(0, 16) : '',
        maxParticipants: contract.maxParticipants
      });
    } else {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      setFormData({
        title: '',
        description: '',
        category: '',
        rewardAmount: 0,
        requirements: '',
        deadline: tomorrow.toISOString().slice(0, 16),
        maxParticipants: 1
      });
    }
  }, [contract]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.title.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
      return;
    }
    
    if (!formData.description.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
      return;
    }
    
    if (!formData.category) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return;
    }
    
    if (formData.rewardAmount <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è');
      return;
    }
    
    if (formData.maxParticipants <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      return;
    }
    
    if (formData.deadline) {
      const deadline = new Date(formData.deadline);
      const today = new Date();
      
      if (deadline <= today) {
        alert('–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
        return;
      }
    }

    onSave(formData);
    onClose();
  };

  const handleInputChange = (field: keyof ContractFormData, value: string | number) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-20 mx-auto p-5 border w-11/12 max-w-2xl shadow-lg rounded-md admin-card">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-medium text-gray-900">
            {contract ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç'}
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <span className="text-2xl">√ó</span>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ */}
          <div>
            <label className="block text-sm font-medium admin-text-secondary mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ *
            </label>
            <input
              type="text"
              required
              className="admin-input w-full"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π –∑–∞—Ä—è–¥–∫–∏"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
            />
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium admin-text-secondary mb-2">
              –û–ø–∏—Å–∞–Ω–∏–µ *
            </label>
            <textarea
              required
              rows={4}
              className="admin-input w-full resize-none"
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
            />
          </div>

          {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium admin-text-secondary mb-2">
              –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            </label>
            <textarea
              rows={3}
              className="admin-input w-full resize-none"
              placeholder="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
              value={formData.requirements || ''}
              onChange={(e) => handleInputChange('requirements', e.target.value)}
            />
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
              </label>
              <select
                required
                className="admin-input w-full"
                value={formData.category}
                onChange={(e) => handleInputChange('category', e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (L-Coin) *
              </label>
              <input
                type="number"
                required
                min="1"
                className="admin-input w-full"
                placeholder="50"
                value={formData.rewardAmount || ''}
                onChange={(e) => handleInputChange('rewardAmount', parseInt(e.target.value) || 0)}
              />
            </div>
          </div>

          {/* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –î–µ–¥–ª–∞–π–Ω */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ *
              </label>
              <input
                type="number"
                required
                min="1"
                max="10"
                className="admin-input w-full"
                value={formData.maxParticipants || ''}
                onChange={(e) => handleInputChange('maxParticipants', parseInt(e.target.value) || 1)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium admin-text-secondary mb-2">
                –î–µ–¥–ª–∞–π–Ω
              </label>
              <input
                type="datetime-local"
                className="admin-input w-full"
                value={formData.deadline || ''}
                onChange={(e) => handleInputChange('deadline', e.target.value)}
              />
            </div>
          </div>

          {/* –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ */}
          {formData.title && formData.rewardAmount > 0 && (
            <div className="p-4 rounded-md" style={{ backgroundColor: 'var(--background-light)' }}>
              <h4 className="text-sm font-medium text-gray-700 mb-3">–ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</h4>
              <div className="admin-card">
                <div className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <h4 className="text-lg font-medium text-gray-900">
                      {formData.title}
                    </h4>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      –û—Ç–∫—Ä—ã—Ç
                    </span>
                  </div>
                  
                  <p className="admin-text-secondary text-sm mb-4">
                    {formData.description}
                  </p>

                  <div className="text-sm space-y-2">
                    <div className="flex items-center">
                      <span className="mr-1">üí∞</span>
                      {formData.rewardAmount} L-Coin
                    </div>
                    <div className="flex items-center">
                      <span className="mr-1">üë•</span>
                      –¥–æ {formData.maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    </div>
                    {formData.deadline && (
                      <div className="flex items-center">
                        <span className="mr-1">üìÖ</span>
                        –¥–æ {new Date(formData.deadline).toLocaleDateString('ru-RU')}
                      </div>
                    )}
                    <div className="flex items-center">
                      <span className="mr-1">üè∑Ô∏è</span>
                      {formData.category}
                    </div>
                  </div>

                  {formData.requirements && (
                    <div className="mt-3 p-2 bg-blue-50 rounded-md">
                      <p className="text-sm text-blue-800">
                        <strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> {formData.requirements}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="admin-button-secondary px-4 py-2 text-sm font-medium rounded-md"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="admin-button-primary px-4 py-2 text-sm font-medium rounded-md"
              style={{ backgroundColor: 'var(--primary-burgundy)' }}
            >
              {contract ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
} 