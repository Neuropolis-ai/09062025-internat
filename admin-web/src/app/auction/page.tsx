'use client';

import React, { useState } from 'react';
import Sidebar from '../../components/Sidebar';
import AuctionModal from '../../components/AuctionModal';

interface AuctionLot {
  id: number;
  title: string;
  description: string;
  startPrice: number;
  currentPrice: number;
  category: string;
  image: string;
  status: 'active' | 'completed' | 'upcoming';
  endDate: string;
  bidsCount: number;
  winner?: string;
  seller: string;
}

interface LotFormData {
  title: string;
  description: string;
  startPrice: number;
  category: string;
  image: string;
  duration: number;
  seller: string;
  minBidStep: number;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–æ–≤
const mockLots: AuctionLot[] = [
  {
    id: 1,
    title: "–§—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –ª–∏—Ü–µ—è",
    description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å —Å–∏–º–≤–æ–ª–∏–∫–æ–π –ª–∏—Ü–µ—è, —Ä–∞–∑–º–µ—Ä M",
    startPrice: 200,
    currentPrice: 450,
    category: "–û–¥–µ–∂–¥–∞",
    image: "üëï",
    status: "active",
    endDate: "2024-12-15T18:00:00Z",
    bidsCount: 12,
    seller: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
  },
  {
    id: 2,
    title: "–ù–∞–±–æ—Ä –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–µ–º–∏—É–º",
    description: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä—É—á–∫–∏, –∫–∞—Ä–∞–Ω–¥–∞—à–∏, –º–∞—Ä–∫–µ—Ä—ã –≤ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ",
    startPrice: 150,
    currentPrice: 280,
    category: "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã",
    image: "üìù",
    status: "active",
    endDate: "2024-12-14T15:30:00Z",
    bidsCount: 8,
    seller: "–£—á–µ–±–Ω–∞—è —á–∞—Å—Ç—å"
  },
  {
    id: 3,
    title: "–ö—Ä—É–∂–∫–∞ —Å –≥–µ—Ä–±–æ–º –ª–∏—Ü–µ—è",
    description: "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –∫—Ä—É–∂–∫–∞ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –≥–µ—Ä–±–æ–º –ª–∏—Ü–µ—è",
    startPrice: 100,
    currentPrice: 350,
    category: "–°—É–≤–µ–Ω–∏—Ä—ã",
    image: "‚òï",
    status: "completed",
    endDate: "2024-12-10T12:00:00Z",
    bidsCount: 15,
    winner: "–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞",
    seller: "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è"
  },
  {
    id: 4,
    title: "–ö–Ω–∏–≥–∞ —Å—Ç–∏—Ö–æ–≤ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤",
    description: "–ê–≤—Ç–æ—Ä—Å–∫–∏–π —Å–±–æ—Ä–Ω–∏–∫ —Å—Ç–∏—Ö–æ–≤ –æ—Ç –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ª–∏—Ü–µ—è",
    startPrice: 300,
    currentPrice: 300,
    category: "–ö–Ω–∏–≥–∏",
    image: "üìö",
    status: "upcoming",
    endDate: "2024-12-20T20:00:00Z",
    bidsCount: 0,
    seller: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–ª—É–±"
  },
  {
    id: 5,
    title: "–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ '–õ–∏—Ü–µ–π—Å–∫–∞—è –º–æ–Ω–æ–ø–æ–ª–∏—è'",
    description: "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ —Ç–µ–º—É –ª–∏—Ü–µ—è",
    startPrice: 500,
    currentPrice: 750,
    category: "–ò–≥—Ä—ã",
    image: "üé≤",
    status: "active",
    endDate: "2024-12-16T16:00:00Z",
    bidsCount: 6,
    seller: "–°–æ–≤–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤"
  }
];

const categories = ["–í—Å–µ", "–û–¥–µ–∂–¥–∞", "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", "–°—É–≤–µ–Ω–∏—Ä—ã", "–ö–Ω–∏–≥–∏", "–ò–≥—Ä—ã"];
const statusFilters = ["–í—Å–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ"];

export default function AuctionPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState("–í—Å–µ");
  const [selectedStatus, setSelectedStatus] = useState("–í—Å–µ");
  const [searchQuery, setSearchQuery] = useState("");
  const [auctionModalOpen, setAuctionModalOpen] = useState(false);
  const [editingLot, setEditingLot] = useState<AuctionLot | null>(null);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  const totalLots = mockLots.length;
  const activeLots = mockLots.filter(lot => lot.status === 'active').length;
  const completedLots = mockLots.filter(lot => lot.status === 'completed').length;
  const totalBids = mockLots.reduce((sum, lot) => sum + lot.bidsCount, 0);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ—Ç–æ–≤
  const filteredLots = mockLots.filter(lot => {
    const matchesCategory = selectedCategory === "–í—Å–µ" || lot.category === selectedCategory;
    const matchesStatus = selectedStatus === "–í—Å–µ" || 
      (selectedStatus === "–ê–∫—Ç–∏–≤–Ω—ã–µ" && lot.status === "active") ||
      (selectedStatus === "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ" && lot.status === "completed") ||
      (selectedStatus === "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ" && lot.status === "upcoming");
    const matchesSearch = lot.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         lot.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesStatus && matchesSearch;
  });

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–Ω—ã–π';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case 'upcoming': return '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π';
      default: return status;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'completed': return 'bg-gray-100 text-gray-800';
      case 'upcoming': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatTimeRemaining = (endDate: string) => {
    const now = new Date();
    const end = new Date(endDate);
    const diff = end.getTime() - now.getTime();
    
    if (diff <= 0) return "–ó–∞–≤–µ—Ä—à–µ–Ω";
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (days > 0) return `${days}–¥ ${hours}—á`;
    if (hours > 0) return `${hours}—á ${minutes}–º`;
    return `${minutes}–º`;
  };

  const handleEditLot = (lot: AuctionLot) => {
    setEditingLot(lot);
    setAuctionModalOpen(true);
  };

  const handleDeleteLot = (lot: AuctionLot) => {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ—Ç "${lot.title}"?`)) {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ—Ç–∞:', lot);
      alert(`–õ–æ—Ç "${lot.title}" —É–¥–∞–ª–µ–Ω`);
    }
  };

  const handleViewBids = (lot: AuctionLot) => {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–≤–æ–∫
    console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–≤–æ–∫ –ª–æ—Ç–∞:', lot);
    alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞: ${lot.title}\n–°—Ç–∞–≤–æ–∫: ${lot.bidsCount}`);
  };

  const handleAddLot = () => {
    setEditingLot(null);
    setAuctionModalOpen(true);
  };

  const handleSaveLot = (lotData: LotFormData) => {
    if (editingLot) {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞:', { ...editingLot, ...lotData });
      alert(`–õ–æ—Ç "${lotData.title}" –æ–±–Ω–æ–≤–ª–µ–Ω!`);
    } else {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞:', lotData);
      alert(`–õ–æ—Ç "${lotData.title}" —Å–æ–∑–¥–∞–Ω!`);
    }
  };

  const handleCloseModal = () => {
    setAuctionModalOpen(false);
    setEditingLot(null);
  };

  return (
    <div className="min-h-screen admin-container flex">
      {/* Sidebar */}
      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col lg:ml-0">
        {/* Header */}
        <header className="admin-card shadow" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-6">
              <div className="flex items-center">
                {/* –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
                <button
                  onClick={() => setSidebarOpen(true)}
                  className="lg:hidden p-2 rounded-md text-white hover:bg-white/20 mr-4"
                >
                  <span className="text-xl">‚ò∞</span>
                </button>
                
                <div>
                  <h1 className="text-2xl font-bold text-white">–ê—É–∫—Ü–∏–æ–Ω</h1>
                  <p className="text-white/90 font-medium">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ –∏ —Ç–æ—Ä–≥–∞–º–∏</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <button
                  onClick={handleAddLot}
                  className="admin-button-primary text-white px-4 py-2 rounded-md transition-colors"
                  style={{ 
                    backgroundColor: 'rgba(255, 255, 255, 0.2)',
                    border: '1px solid rgba(255, 255, 255, 0.3)'
                  }}
                  onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.3)'}
                  onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}
                >
                  –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main content */}
        <main className="flex-1 px-4 py-6 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto space-y-6">
            
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center" 
                           style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                        <span className="text-white font-bold">üéØ</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–í—Å–µ–≥–æ –ª–æ—Ç–æ–≤</dt>
                        <dd className="text-lg font-medium text-gray-900">{totalLots}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center"
                           style={{ backgroundColor: '#10B981' }}>
                        <span className="text-white font-bold">üî•</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–ê–∫—Ç–∏–≤–Ω—ã—Ö</dt>
                        <dd className="text-lg font-medium text-gray-900">{activeLots}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center"
                           style={{ backgroundColor: '#6B7280' }}>
                        <span className="text-white font-bold">‚úÖ</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö</dt>
                        <dd className="text-lg font-medium text-gray-900">{completedLots}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center"
                           style={{ backgroundColor: '#F59E0B' }}>
                        <span className="text-white font-bold">üí∞</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫</dt>
                        <dd className="text-lg font-medium text-gray-900">{totalBids}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
            <div className="admin-card">
              <div className="px-4 py-5 sm:p-6">
                <div className="sm:flex sm:items-center sm:justify-between mb-6">
                  <div>
                    <h3 className="text-lg leading-6 font-medium text-gray-900">
                      –õ–æ—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞
                    </h3>
                    <p className="mt-1 max-w-2xl text-sm admin-text-secondary">
                      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏ –ª–∏—Ü–µ—è
                    </p>
                  </div>
                  <div className="mt-4 sm:mt-0">
                    <button
                      type="button"
                      onClick={handleAddLot}
                      className="admin-button-primary inline-flex items-center px-4 py-2 text-sm font-medium rounded-md"
                      style={{ backgroundColor: 'var(--primary-burgundy)' }}
                    >
                      <span className="mr-2">üéØ</span>
                      –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç
                    </button>
                  </div>
                </div>

                {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
                <div className="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                      –ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤
                    </label>
                    <input
                      type="text"
                      id="search"
                      className="admin-input w-full"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                  <div>
                    <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                      –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    </label>
                    <select
                      id="category"
                      className="admin-input w-full"
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                    >
                      {categories.map(category => (
                        <option key={category} value={category}>{category}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
                      –°—Ç–∞—Ç—É—Å
                    </label>
                    <select
                      id="status"
                      className="admin-input w-full"
                      value={selectedStatus}
                      onChange={(e) => setSelectedStatus(e.target.value)}
                    >
                      {statusFilters.map(status => (
                        <option key={status} value={status}>{status}</option>
                      ))}
                    </select>
                  </div>
                </div>
                
                {/* –°–µ—Ç–∫–∞ –ª–æ—Ç–æ–≤ */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredLots.map((lot) => (
                    <div key={lot.id} className="admin-card hover:shadow-lg transition-shadow">
                      <div className="p-4">
                        {/* –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è */}
                        <div className="flex justify-between items-start mb-4">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(lot.status)}`}>
                            {getStatusText(lot.status)}
                          </span>
                          {lot.status === 'active' && (
                            <span className="text-xs admin-text-secondary">
                              {formatTimeRemaining(lot.endDate)}
                            </span>
                          )}
                        </div>

                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ—Ç–∞ */}
                        <div className="flex justify-center mb-4">
                          <div className="w-16 h-16 rounded-lg flex items-center justify-center text-4xl"
                               style={{ backgroundColor: 'var(--background-light)' }}>
                            {lot.image}
                          </div>
                        </div>
                        
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ */}
                        <div className="text-center mb-4">
                          <h4 className="text-lg font-medium text-gray-900 mb-1">
                            {lot.title}
                          </h4>
                          <p className="text-sm admin-text-secondary mb-3">
                            {lot.description}
                          </p>
                          
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="admin-text-secondary">–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                              <span className="font-medium">{lot.startPrice} —Ç–æ–∫–µ–Ω–æ–≤</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="admin-text-secondary">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</span>
                              <span className="font-bold" style={{ color: 'var(--primary-burgundy)' }}>
                                {lot.currentPrice} —Ç–æ–∫–µ–Ω–æ–≤
                              </span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="admin-text-secondary">–°—Ç–∞–≤–æ–∫:</span>
                              <span className="font-medium">{lot.bidsCount}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="admin-text-secondary">–ü—Ä–æ–¥–∞–≤–µ—Ü:</span>
                              <span className="font-medium">{lot.seller}</span>
                            </div>
                            {lot.winner && (
                              <div className="flex justify-between text-sm">
                                <span className="admin-text-secondary">–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</span>
                                <span className="font-medium text-green-600">{lot.winner}</span>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        {/* –î–µ–π—Å—Ç–≤–∏—è */}
                        <div className="flex justify-center space-x-2">
                          <button
                            onClick={() => handleViewBids(lot)}
                            className="text-gray-400 hover:text-blue-600 transition-colors p-1"
                            title="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–≤–æ–∫"
                          >
                            <span className="text-lg">üëÅÔ∏è</span>
                          </button>
                          <button
                            onClick={() => handleEditLot(lot)}
                            className="text-gray-400 hover:text-gray-600 transition-colors p-1"
                            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                          >
                            <span className="text-lg">‚úèÔ∏è</span>
                          </button>
                          <button
                            onClick={() => handleDeleteLot(lot)}
                            className="text-gray-400 hover:text-red-600 transition-colors p-1"
                            title="–£–¥–∞–ª–∏—Ç—å"
                          >
                            <span className="text-lg">üóëÔ∏è</span>
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
                {filteredLots.length === 0 && (
                  <div className="text-center py-12">
                    <div className="text-6xl mb-4">üîç</div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –õ–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </h3>
                    <p className="text-sm admin-text-secondary">
                      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–æ—Ç
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ª–æ—Ç–∞ */}
      <AuctionModal 
        isOpen={auctionModalOpen}
        onClose={handleCloseModal}
        onSave={handleSaveLot}
        editLot={editingLot}
      />
    </div>
  );
} 