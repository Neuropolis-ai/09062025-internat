'use client';

import React, { useState } from 'react';
import Sidebar from '../../components/Sidebar';
import ProductModal from '../../components/ProductModal';

interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  category: string;
  stock: number;
  image: string;
  isActive: boolean;
}

interface ProductFormData {
  name: string;
  description: string;
  price: number;
  category: string;
  stock: number;
  image: string;
  isActive: boolean;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
const mockProducts: Product[] = [
  {
    id: 1,
    name: "–†—É—á–∫–∞ –≥–µ–ª–µ–≤–∞—è —Å–∏–Ω—è—è",
    description: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–ª–µ–≤–∞—è —Ä—É—á–∫–∞ –¥–ª—è –ø–∏—Å—å–º–∞",
    price: 25,
    category: "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã",
    stock: 150,
    image: "üñäÔ∏è",
    isActive: true
  },
  {
    id: 2,
    name: "–¢–µ—Ç—Ä–∞–¥—å 48 –ª–∏—Å—Ç–æ–≤",
    description: "–¢–µ—Ç—Ä–∞–¥—å –≤ –∫–ª–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–µ–π",
    price: 45,
    category: "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", 
    stock: 80,
    image: "üìì",
    isActive: true
  },
  {
    id: 3,
    name: "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –±–∞—Ç–æ–Ω—á–∏–∫",
    description: "–í–∫—É—Å–Ω—ã–π –º–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥",
    price: 60,
    category: "–ï–¥–∞",
    stock: 200,
    image: "üç´",
    isActive: true
  },
  {
    id: 4,
    name: "–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π 0.2–ª",
    description: "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —è–±–ª–æ—á–Ω—ã–π —Å–æ–∫",
    price: 35,
    category: "–ù–∞–ø–∏—Ç–∫–∏",
    stock: 120,
    image: "üßÉ",
    isActive: true
  },
  {
    id: 5,
    name: "–ó–Ω–∞—á–æ–∫ –ª–∏—Ü–µ—è",
    description: "–ü–∞–º—è—Ç–Ω—ã–π –∑–Ω–∞—á–æ–∫ —Å —Å–∏–º–≤–æ–ª–∏–∫–æ–π –ª–∏—Ü–µ—è",
    price: 150,
    category: "–°—É–≤–µ–Ω–∏—Ä—ã",
    stock: 50,
    image: "üèÖ",
    isActive: true
  },
  {
    id: 6,
    name: "–ë–ª–æ–∫–Ω–æ—Ç –ê5",
    description: "–ë–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –≤ —Ç–≤–µ—Ä–¥–æ–π –æ–±–ª–æ–∂–∫–µ",
    price: 120,
    category: "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã",
    stock: 0,
    image: "üìî",
    isActive: false
  }
];

const categories = ["–í—Å–µ", "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", "–ï–¥–∞", "–ù–∞–ø–∏—Ç–∫–∏", "–°—É–≤–µ–Ω–∏—Ä—ã"];

export default function ShopPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState("–í—Å–µ");
  const [searchQuery, setSearchQuery] = useState("");
  const [productModalOpen, setProductModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  const totalProducts = mockProducts.length;
  const activeProducts = mockProducts.filter(p => p.isActive).length;
  const totalStock = mockProducts.reduce((sum, p) => sum + p.stock, 0);
  const outOfStock = mockProducts.filter(p => p.stock === 0).length;

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const filteredProducts = mockProducts.filter(product => {
    const matchesCategory = selectedCategory === "–í—Å–µ" || product.category === selectedCategory;
    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const handleToggleProduct = (productId: number) => {
    // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
    console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞:', productId);
    alert('–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω!');
  };

  const handleEditProduct = (product: Product) => {
    setEditingProduct(product);
    setProductModalOpen(true);
  };

  const handleDeleteProduct = (product: Product) => {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.name}"?`)) {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', product);
      alert(`–¢–æ–≤–∞—Ä "${product.name}" —É–¥–∞–ª–µ–Ω`);
    }
  };

  const handleAddProduct = () => {
    setEditingProduct(null);
    setProductModalOpen(true);
  };

  const handleSaveProduct = (productData: ProductFormData) => {
    if (editingProduct) {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', { ...editingProduct, ...productData });
      alert(`–¢–æ–≤–∞—Ä "${productData.name}" –æ–±–Ω–æ–≤–ª–µ–Ω!`);
    } else {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', productData);
      alert(`–¢–æ–≤–∞—Ä "${productData.name}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
    }
  };

  const handleCloseModal = () => {
    setProductModalOpen(false);
    setEditingProduct(null);
  };

  return (
    <div className="min-h-screen admin-container flex">
      {/* Sidebar */}
      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col lg:ml-0">
        {/* Header */}
        <header className="admin-card shadow" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-6">
              <div className="flex items-center">
                {/* –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
                <button
                  onClick={() => setSidebarOpen(true)}
                  className="lg:hidden p-2 rounded-md text-white hover:bg-white/20 mr-4"
                >
                  <span className="text-xl">‚ò∞</span>
                </button>
                
                <div>
                  <h1 className="text-2xl font-bold text-white">L-shop</h1>
                  <p className="text-white/90 font-medium">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º –ª–∏—Ü–µ—è</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <button
                  onClick={handleAddProduct}
                  className="admin-button-primary text-white px-4 py-2 rounded-md transition-colors"
                  style={{ 
                    backgroundColor: 'rgba(255, 255, 255, 0.2)',
                    border: '1px solid rgba(255, 255, 255, 0.3)'
                  }}
                  onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.3)'}
                  onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}
                >
                  –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main content */}
        <main className="flex-1 px-4 py-6 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto space-y-6">
            
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center" 
                           style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                        <span className="text-white font-bold">üì¶</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</dt>
                        <dd className="text-lg font-medium text-gray-900">{totalProducts}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center"
                           style={{ backgroundColor: '#10B981' }}>
                        <span className="text-white font-bold">‚úÖ</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–ê–∫—Ç–∏–≤–Ω—ã—Ö</dt>
                        <dd className="text-lg font-medium text-gray-900">{activeProducts}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center"
                           style={{ backgroundColor: '#3B82F6' }}>
                        <span className="text-white font-bold">üìä</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫</dt>
                        <dd className="text-lg font-medium text-gray-900">{totalStock}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center"
                           style={{ backgroundColor: '#EF4444' }}>
                        <span className="text-white font-bold">‚ö†Ô∏è</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</dt>
                        <dd className="text-lg font-medium text-gray-900">{outOfStock}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
            <div className="admin-card">
              <div className="px-4 py-5 sm:p-6">
                <div className="sm:flex sm:items-center sm:justify-between mb-6">
                  <div>
                    <h3 className="text-lg leading-6 font-medium text-gray-900">
                      –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
                    </h3>
                    <p className="mt-1 max-w-2xl text-sm admin-text-secondary">
                      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ L-shop
                    </p>
                  </div>
                  <div className="mt-4 sm:mt-0">
                    <button
                      type="button"
                      onClick={handleAddProduct}
                      className="admin-button-primary inline-flex items-center px-4 py-2 text-sm font-medium rounded-md"
                      style={{ backgroundColor: 'var(--primary-burgundy)' }}
                    >
                      <span className="mr-2">‚ûï</span>
                      –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                    </button>
                  </div>
                </div>

                {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
                <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                      –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
                    </label>
                    <input
                      type="text"
                      id="search"
                      className="admin-input w-full"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                  <div>
                    <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                      –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    </label>
                    <select
                      id="category"
                      className="admin-input w-full"
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                    >
                      {categories.map(category => (
                        <option key={category} value={category}>{category}</option>
                      ))}
                    </select>
                  </div>
                </div>
                
                {/* –°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                  {filteredProducts.map((product) => (
                    <div key={product.id} className="admin-card hover:shadow-lg transition-shadow">
                      <div className="p-4">
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                        <div className="flex justify-center mb-4">
                          <div className="w-16 h-16 rounded-lg flex items-center justify-center text-4xl"
                               style={{ backgroundColor: 'var(--background-light)' }}>
                            {product.image}
                          </div>
                        </div>
                        
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                        <div className="text-center mb-4">
                          <h4 className="text-lg font-medium text-gray-900 mb-1">
                            {product.name}
                          </h4>
                          <p className="text-sm admin-text-secondary mb-2">
                            {product.description}
                          </p>
                          <div className="flex items-center justify-center space-x-2 mb-2">
                            <span className="text-lg font-bold" style={{ color: 'var(--primary-burgundy)' }}>
                              {product.price} —Ç–æ–∫–µ–Ω–æ–≤
                            </span>
                          </div>
                          <div className="flex items-center justify-center space-x-4 text-sm">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              product.stock > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                            }`}>
                              {product.stock > 0 ? `–í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}` : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                            </span>
                            <span className="admin-text-secondary">
                              {product.category}
                            </span>
                          </div>
                        </div>
                        
                        {/* –°—Ç–∞—Ç—É—Å –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                        <div className="space-y-3">
                          <div className="flex items-center justify-center">
                            <label className="flex items-center">
                              <input
                                type="checkbox"
                                checked={product.isActive}
                                onChange={() => handleToggleProduct(product.id)}
                                className="mr-2"
                              />
                              <span className="text-sm text-gray-700">
                                {product.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                              </span>
                            </label>
                          </div>
                          
                          <div className="flex justify-center space-x-2">
                            <button
                              onClick={() => handleEditProduct(product)}
                              className="text-gray-400 hover:text-gray-600 transition-colors p-1"
                              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                            >
                              <span className="text-lg">‚úèÔ∏è</span>
                            </button>
                            <button
                              onClick={() => handleDeleteProduct(product)}
                              className="text-gray-400 hover:text-red-600 transition-colors p-1"
                              title="–£–¥–∞–ª–∏—Ç—å"
                            >
                              <span className="text-lg">üóëÔ∏è</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
                {filteredProducts.length === 0 && (
                  <div className="text-center py-12">
                    <div className="text-6xl mb-4">üîç</div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </h3>
                    <p className="text-sm admin-text-secondary">
                      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–≤–∞—Ä–∞ */}
      <ProductModal 
        isOpen={productModalOpen}
        onClose={handleCloseModal}
        onSave={handleSaveProduct}
        editProduct={editingProduct}
      />
    </div>
  );
} 