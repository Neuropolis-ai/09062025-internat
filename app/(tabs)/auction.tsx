import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TouchableOpacity, 
  Image, 
  Modal, 
  TextInput, 
  Alert,
  SafeAreaView,
  Platform,
  StatusBar
} from 'react-native';
import { Header } from '../components/Header';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface AuctionItem {
  id: string;
  title: string;
  description: string;
  currentBid: number;
  minIncrement: number;
  image: string;
  userParticipating: boolean;
}

interface BidModalProps {
  visible: boolean;
  item: AuctionItem;
  onClose: () => void;
  onConfirm: (amount: number, comment?: string) => void;
}

// –¢–∏–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
type FilterType = 'active' | 'participating';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫
const FilterTabs: React.FC<{ 
  activeFilter: FilterType; 
  onFilterChange: (filter: FilterType) => void;
  participatingCount: number;
}> = ({ activeFilter, onFilterChange, participatingCount }) => {
  return (
    <View style={styles.tabsContainer}>
      <TouchableOpacity
        style={[styles.tab, activeFilter === 'active' && styles.activeTab]}
        onPress={() => onFilterChange('active')}
      >
        <Text style={[styles.tabText, activeFilter === 'active' && styles.activeTabText]}>
          –ê–∫—Ç–∏–≤–Ω—ã–µ
        </Text>
      </TouchableOpacity>
      
      <TouchableOpacity
        style={[styles.tab, activeFilter === 'participating' && styles.activeTab]}
        onPress={() => onFilterChange('participating')}
      >
        <Text style={[styles.tabText, activeFilter === 'participating' && styles.activeTabText]}>
          –£—á–∞—Å—Ç–≤—É—é
        </Text>
        {participatingCount > 0 && (
          <View style={styles.tabBadge}>
            <Text style={styles.tabBadgeText}>{participatingCount}</Text>
          </View>
        )}
      </TouchableOpacity>
    </View>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏
const BidModal: React.FC<BidModalProps> = ({ visible, item, onClose, onConfirm }) => {
  const [bidAmount, setBidAmount] = useState('');
  const [comment, setComment] = useState('');
  const [error, setError] = useState('');

  const minBid = item.currentBid + item.minIncrement;

  const handleConfirm = () => {
    const amount = parseInt(bidAmount);
    
    if (!bidAmount || isNaN(amount)) {
      setError('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏');
      return;
    }
    
    if (amount < minBid) {
      setError(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${minBid} L-Coin`);
      return;
    }

    onConfirm(amount, comment);
    setBidAmount('');
    setComment('');
    setError('');
  };

  const handleClose = () => {
    setBidAmount('');
    setComment('');
    setError('');
    onClose();
  };

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
      onRequestClose={handleClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <View style={styles.modalItemContainer}>
              <View style={styles.modalItemIcon}>
                <Text style={styles.modalItemEmoji}>{item.image}</Text>
              </View>
              <Text style={styles.modalItemTitle}>{item.title}</Text>
            </View>
          </View>

          <View style={styles.modalContent}>
            <Text style={styles.modalLabel}>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞</Text>
            <TextInput
              style={[styles.modalInput, error ? styles.modalInputError : null]}
              value={bidAmount}
              onChangeText={(text) => {
                setBidAmount(text);
                setError('');
              }}
              placeholder={`–ú–∏–Ω–∏–º—É–º ${minBid} L-Coin`}
              keyboardType="numeric"
              placeholderTextColor="#666666"
            />
            
            {error ? <Text style={styles.errorText}>{error}</Text> : null}
            
            <Text style={styles.hintText}>
              –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏: {item.minIncrement} L-Coin
            </Text>

            <Text style={styles.modalLabel}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Text>
            <TextInput
              style={styles.modalInput}
              value={comment}
              onChangeText={setComment}
              placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
              multiline={true}
              numberOfLines={3}
              placeholderTextColor="#666666"
            />
          </View>

          <View style={styles.modalButtons}>
            <TouchableOpacity style={styles.cancelButton} onPress={handleClose}>
              <Text style={styles.cancelButtonText}>–û—Ç–º–µ–Ω–∏—Ç—å</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.confirmButton} onPress={handleConfirm}>
              <Text style={styles.confirmButtonText}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞–≤–∫—É</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ—Ç–∞
const AuctionCard: React.FC<{ item: AuctionItem; onBid: () => void }> = ({ item, onBid }) => {
  return (
    <View style={styles.card}>
      <View style={styles.cardContent}>
        <View style={styles.itemIcon}>
          <Text style={styles.itemEmoji}>{item.image}</Text>
        </View>
        
        <View style={styles.itemInfo}>
          <View style={styles.itemHeader}>
            <View style={styles.titleContainer}>
              <Text style={styles.itemTitle} numberOfLines={2}>{item.title}</Text>
              {item.userParticipating && (
                <View style={styles.participatingBadge}>
                  <Text style={styles.participatingText}>–£—á–∞—Å—Ç–≤—É–µ—à—å</Text>
                </View>
              )}
            </View>
          </View>
          
          <Text style={styles.itemDescription}>{item.description}</Text>
          
          <View style={styles.bidInfo}>
            <Text style={styles.currentBidLabel}>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞</Text>
            <Text style={styles.currentBidAmount}>{item.currentBid} L-Coin</Text>
          </View>
        </View>
      </View>
      
      <TouchableOpacity style={styles.bidButton} onPress={onBid}>
        <Text style={styles.bidButtonText}>–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</Text>
      </TouchableOpacity>
    </View>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É–∫—Ü–∏–æ–Ω–∞
export default function AuctionScreen() {
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedItem, setSelectedItem] = useState<AuctionItem | null>(null);
  const [activeFilter, setActiveFilter] = useState<FilterType>('active');
  const [auctionItems, setAuctionItems] = useState<AuctionItem[]>([
    {
      id: '1',
      title: '–≠–∫—Å–∫—É—Ä—Å–∏—è –≤ –º—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞',
      description: '–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π —Å –≥–∏–¥–æ–º',
      currentBid: 45,
      minIncrement: 5,
      image: 'üèõÔ∏è',
      userParticipating: false,
    },
    {
      id: '2',
      title: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
      description: '–ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ Python —Å –æ–ø—ã—Ç–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º',
      currentBid: 75,
      minIncrement: 10,
      image: 'üíª',
      userParticipating: true,
    },
    {
      id: '3',
      title: '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
      description: '–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É',
      currentBid: 30,
      minIncrement: 5,
      image: 'üèì',
      userParticipating: false,
    },
    {
      id: '4',
      title: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å–∫—É–ª—å–ø—Ç—É—Ä',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞',
      currentBid: 60,
      minIncrement: 10,
      image: 'üé®',
      userParticipating: false,
    },
    {
      id: '5',
      title: '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
      description: '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª—é–¥ —Å —à–µ—Ñ-–ø–æ–≤–∞—Ä–æ–º',
      currentBid: 85,
      minIncrement: 15,
      image: 'üë®‚Äçüç≥',
      userParticipating: true,
    },
  ]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  const filteredItems = auctionItems.filter(item => {
    if (activeFilter === 'participating') {
      return item.userParticipating;
    }
    return true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
  });

  // –ü–æ–¥—Å—á–µ—Ç —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  const participatingCount = auctionItems.filter(item => item.userParticipating).length;

  const handleBidPress = (item: AuctionItem) => {
    setSelectedItem(item);
    setModalVisible(true);
  };

  const handleBidConfirm = (amount: number, comment?: string) => {
    if (selectedItem) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞
      setAuctionItems(items => 
        items.map(item => 
          item.id === selectedItem.id 
            ? { ...item, currentBid: amount, userParticipating: true }
            : item
        )
      );

      Alert.alert(
        '–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!', 
        `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ${amount} L-Coin –Ω–∞ "${selectedItem.title}" —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞.`,
        [{ text: 'OK' }]
      );

      setModalVisible(false);
      setSelectedItem(null);
    }
  };

  const handleNotificationPress = () => {
    Alert.alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–∞—Ö');
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar 
        barStyle="light-content" 
        backgroundColor="#8B2439"
        translucent={false}
      />
      
      <Header 
        title="–ê—É–∫—Ü–∏–æ–Ω"
        notificationCount={2}
        onNotificationPress={handleNotificationPress}
        showNotificationButton={true}
      />
      
      <FilterTabs 
        activeFilter={activeFilter}
        onFilterChange={setActiveFilter}
        participatingCount={participatingCount}
      />
      
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        <View style={styles.itemsList}>
          {filteredItems.length > 0 ? (
            filteredItems.map((item) => (
              <AuctionCard 
                key={item.id} 
                item={item} 
                onBid={() => handleBidPress(item)} 
              />
            ))
          ) : (
            <View style={styles.emptyState}>
              <Text style={styles.emptyIcon}>üì≠</Text>
              <Text style={styles.emptyTitle}>
                {activeFilter === 'participating' ? '–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö' : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤'}
              </Text>
              <Text style={styles.emptyDescription}>
                {activeFilter === 'participating' 
                  ? '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ê–∫—Ç–∏–≤–Ω—ã–µ" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–∞—Ö'
                  : '–ù–æ–≤—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!'
                }
              </Text>
            </View>
          )}
        </View>
      </ScrollView>

      {selectedItem && (
        <BidModal
          visible={modalVisible}
          item={selectedItem}
          onClose={() => setModalVisible(false)}
          onConfirm={handleBidConfirm}
        />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F2F2F7',
  },
  content: {
    flex: 1,
  },
  
  // –°—Ç–∏–ª–∏ –≤–∫–ª–∞–¥–æ–∫
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5EA',
    paddingHorizontal: 20,
  },
  tab: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderBottomWidth: 2,
    borderBottomColor: 'transparent',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  activeTab: {
    borderBottomColor: '#8B2439',
  },
  tabText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#666666',
  },
  activeTabText: {
    color: '#8B2439',
    fontWeight: '600',
  },
  tabBadge: {
    backgroundColor: '#22C55E',
    borderRadius: 10,
    minWidth: 20,
    height: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 8,
  },
  tabBadgeText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  
  itemsList: {
    padding: 20,
    paddingBottom: 40,
  },
  card: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5EA',
    marginBottom: 16,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.06,
    shadowRadius: 8,
    elevation: 3,
  },
  cardContent: {
    flexDirection: 'row',
    padding: 16,
    alignItems: 'flex-start',
  },
  itemIcon: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#F2F2F7',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 16,
  },
  itemEmoji: {
    fontSize: 28,
  },
  itemInfo: {
    flex: 1,
  },
  itemHeader: {
    marginBottom: 8,
  },
  titleContainer: {
    flexDirection: 'column',
    gap: 8,
  },
  itemTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#8B2439',
    lineHeight: 22,
  },
  participatingBadge: {
    backgroundColor: '#22C55E',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  participatingText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  itemDescription: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
    marginBottom: 12,
  },
  bidInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  currentBidLabel: {
    fontSize: 14,
    color: '#666666',
  },
  currentBidAmount: {
    fontSize: 16,
    fontWeight: '600',
    color: '#8B2439',
  },
  bidButton: {
    backgroundColor: '#8B2439',
    paddingVertical: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  bidButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  
  // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  emptyState: {
    alignItems: 'center',
    paddingVertical: 60,
    paddingHorizontal: 40,
  },
  emptyIcon: {
    fontSize: 64,
    marginBottom: 16,
  },
  emptyTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#8B2439',
    textAlign: 'center',
    marginBottom: 8,
  },
  emptyDescription: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
  },
  
  // –°—Ç–∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    width: '100%',
    maxWidth: 400,
    overflow: 'hidden',
  },
  modalHeader: {
    backgroundColor: '#F2F2F7',
    padding: 20,
    alignItems: 'center',
  },
  modalItemContainer: {
    alignItems: 'center',
  },
  modalItemIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#FFFFFF',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 12,
  },
  modalItemEmoji: {
    fontSize: 40,
  },
  modalItemTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#8B2439',
    textAlign: 'center',
  },
  modalContent: {
    padding: 20,
  },
  modalLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#8B2439',
    marginBottom: 8,
    marginTop: 8,
  },
  modalInput: {
    borderWidth: 1,
    borderColor: '#E5E5EA',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#FFFFFF',
    marginBottom: 8,
  },
  modalInputError: {
    borderColor: '#FF4444',
  },
  errorText: {
    color: '#FF4444',
    fontSize: 14,
    marginBottom: 8,
  },
  hintText: {
    color: '#666666',
    fontSize: 14,
    marginBottom: 16,
  },
  modalButtons: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderRightWidth: 1,
    borderRightColor: '#E5E5EA',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666666',
  },
  confirmButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    backgroundColor: '#8B2439',
  },
  confirmButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
}); 