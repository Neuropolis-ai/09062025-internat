import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Modal,
  SafeAreaView,
  Platform,
} from 'react-native';
import { Header } from '../components/Header';
import { NotificationCard } from '../components/NotificationCard';
import { NotificationModal } from '../components/NotificationModal';

interface Notification {
  id: string;
  title: string;
  message: string;
  date: string;
  time: string;
  type: 'system' | 'personal' | 'admin';
  isRead: boolean;
}

const mockNotifications: Notification[] = [
  {
    id: '1',
    title: '–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
    message: '–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö.',
    date: '15.01.2025',
    time: '09:30',
    type: 'system',
    isRead: false,
  },
  {
    id: '2',
    title: '–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è',
    message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–π–¥–∏—Ç–µ –ø–æ—Å–ª–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.',
    date: '14.01.2025',
    time: '14:20',
    type: 'personal',
    isRead: false,
  },
  {
    id: '3',
    title: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–∏—Ü–µ—è',
    message: '–£–≤–∞–∂–∞–µ–º—ã–µ —É—á–µ–Ω–∏–∫–∏! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –¥—Ä–µ—Å—Å-–∫–æ–¥–∞ –≤ —É—á–µ–±–Ω–æ–µ –≤—Ä–µ–º—è.',
    date: '13.01.2025',
    time: '16:45',
    type: 'admin',
    isRead: true,
  },
  {
    id: '4',
    title: '–û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞',
    message: '–í–∞–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ "5" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏". –¢–µ–º–∞: "–°–º—É—Ç–Ω–æ–µ –≤—Ä–µ–º—è"',
    date: '12.01.2025',
    time: '11:15',
    type: 'system',
    isRead: true,
  },
  {
    id: '5',
    title: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
    message: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –Ω–∞—É—á–Ω—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é "–ú–æ–ª–æ–¥—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏" 20 —è–Ω–≤–∞—Ä—è –≤ –∞–∫—Ç–æ–≤–æ–º –∑–∞–ª–µ.',
    date: '11.01.2025',
    time: '08:00',
    type: 'admin',
    isRead: false,
  },
];

export default function NotificationsScreen() {
  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);
  const [selectedNotification, setSelectedNotification] = useState<Notification | null>(null);
  const [modalVisible, setModalVisible] = useState(false);

  const markAsRead = (notificationId: string) => {
    setNotifications(prev => 
      prev.map(notification => 
        notification.id === notificationId 
          ? { ...notification, isRead: true }
          : notification
      )
    );
  };

  const handleNotificationPress = (notification: Notification) => {
    if (!notification.isRead) {
      markAsRead(notification.id);
    }
    setSelectedNotification(notification);
    setModalVisible(true);
  };

  const getNotificationTypeIcon = (type: string) => {
    switch (type) {
      case 'system':
        return 'üîî';
      case 'personal':
        return 'üë§';
      case 'admin':
        return 'üì¢';
      default:
        return 'üìù';
    }
  };

  const renderNotificationCard = (notification: Notification) => (
    <NotificationCard 
      key={notification.id}
      notification={notification}
      onPress={() => handleNotificationPress(notification)}
    />
  );

  return (
    <SafeAreaView style={styles.container}>
      <Header 
        title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" 
        showBackButton={true}
        showNotificationButton={false}
        onNotificationPress={() => {}}
      />
      
      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.notificationsList}>
          {notifications.map(renderNotificationCard)}
        </View>
      </ScrollView>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <NotificationModal 
        visible={modalVisible}
        notification={selectedNotification}
        onClose={() => setModalVisible(false)}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F2F2F7',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 20,
  },
  notificationsList: {
    paddingHorizontal: 20,
    paddingTop: 16,
  },
}); 