'use client';

import React, { useState } from 'react';
import Sidebar from '../../components/Sidebar';
import AddStudentModal from '../../components/AddStudentModal';
import TokensModal from '../../components/TokensModal';

interface Student {
  id: string;
  fullName: string;
  class: string;
  cottage: string;
  linn: string;
  accountTokens: number;
  creditTokens: number;
  achievements: string[];
  positions: string[];
  belongsTo: string;
  createdAt: string;
}

interface StudentFormData {
  fullName: string;
  class: string;
  cottage: string;
  accountTokens: number;
  creditTokens: number;
  achievements: string[];
  positions: string[];
  belongsTo: string;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–æ–≤
const mockStudents: Student[] = [
  {
    id: '1',
    fullName: '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–µ–µ–≤–∏—á',
    class: '10–ê',
    cottage: '–ê—Ä–≥–æ–Ω',
    linn: 'IV001234',
    accountTokens: 125,
    creditTokens: 50,
    achievements: ['–õ—É—á—à–∏–π –≤ —Å–ø–æ—Ä—Ç–µ', '–ê–∫—Ç–∏–≤–∏—Å—Ç –≥–æ–¥–∞'],
    positions: ['–°—Ç–∞—Ä–æ—Å—Ç–∞ –∫–ª–∞—Å—Å–∞'],
    belongsTo: '–î–æ–º –ê—Ä–≥–æ–Ω',
    createdAt: '2024-01-15'
  },
  {
    id: '2',
    fullName: '–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞',
    class: '11–ë',
    cottage: '–ì–µ–ª–∏–π',
    linn: 'IV001235',
    accountTokens: 98,
    creditTokens: 25,
    achievements: ['–û—Ç–ª–∏—á–Ω–∏—Ü–∞', '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ª–∏–º–ø–∏–∞–¥—ã'],
    positions: ['–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã'],
    belongsTo: '–î–æ–º –ì–µ–ª–∏–π',
    createdAt: '2024-01-12'
  },
  {
    id: '3',
    fullName: '–ü–µ—Ç—Ä–æ–≤ –ú–∞–∫—Å–∏–º –°–µ—Ä–≥–µ–µ–≤–∏—á',
    class: '9–í',
    cottage: '–ù–µ–æ–Ω',
    linn: 'IV001236',
    accountTokens: 87,
    creditTokens: 35,
    achievements: ['–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å'],
    positions: [],
    belongsTo: '–î–æ–º –ù–µ–æ–Ω',
    createdAt: '2024-01-10'
  },
  {
    id: '4',
    fullName: '–ö–æ–∑–ª–æ–≤–∞ –ú–∞—Ä–∏—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞',
    class: '8–ê',
    cottage: '–ö—Ä–∏–ø—Ç–æ–Ω',
    linn: 'IV001237',
    accountTokens: 156,
    creditTokens: 10,
    achievements: ['–õ—É—á—à–∏–π –¥–µ–±—é—Ç–∞–Ω—Ç'],
    positions: ['–§–∏–∑–æ—Ä–≥'],
    belongsTo: '–î–æ–º –ö—Ä–∏–ø—Ç–æ–Ω',
    createdAt: '2024-01-08'
  },
  {
    id: '5',
    fullName: '–°–º–∏—Ä–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á',
    class: '11–ê',
    cottage: '–ê—Ä–≥–æ–Ω',
    linn: 'IV001238',
    accountTokens: 203,
    creditTokens: 75,
    achievements: ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä', '–ó–æ–ª–æ—Ç–∞—è –º–µ–¥–∞–ª—å'],
    positions: ['–ì–ª–∞–≤–∞ —Å–æ–≤–µ—Ç–∞'],
    belongsTo: '–î–æ–º –ê—Ä–≥–æ–Ω',
    createdAt: '2024-01-05'
  }
];

export default function StudentsPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedClass, setSelectedClass] = useState("–í—Å–µ");
  const [selectedCottage, setSelectedCottage] = useState("–í—Å–µ");
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [addStudentModalOpen, setAddStudentModalOpen] = useState(false);
  const [tokensModalOpen, setTokensModalOpen] = useState(false);
  const [editingStudent, setEditingStudent] = useState<Student | null>(null);
  const [selectedStudentForTokens, setSelectedStudentForTokens] = useState<Student | null>(null);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalStudents = mockStudents.length;
  const totalTokens = mockStudents.reduce((sum, student) => sum + student.accountTokens, 0);
  const averageTokens = Math.round(totalTokens / totalStudents);
  const totalCreditTokens = mockStudents.reduce((sum, student) => sum + student.creditTokens, 0);

  // –§–∏–ª—å—Ç—Ä—ã
  const classes = ["–í—Å–µ", ...Array.from(new Set(mockStudents.map(s => s.class))).sort()];
  const cottages = ["–í—Å–µ", ...Array.from(new Set(mockStudents.map(s => s.cottage))).sort()];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–æ–≤
  const filteredStudents = mockStudents.filter(student => {
    const matchesSearch = student.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         student.linn.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesClass = selectedClass === "–í—Å–µ" || student.class === selectedClass;
    const matchesCottage = selectedCottage === "–í—Å–µ" || student.cottage === selectedCottage;
    return matchesSearch && matchesClass && matchesCottage;
  });

  const handleAddStudent = () => {
    setEditingStudent(null);
    setAddStudentModalOpen(true);
  };

  const handleEditStudent = (student: Student) => {
    setEditingStudent(student);
    setAddStudentModalOpen(true);
  };

  const handleDeleteStudent = (student: Student) => {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ "${student.fullName}"?`)) {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      alert(`–£—á–µ–Ω–∏–∫ "${student.fullName}" —É–¥–∞–ª–µ–Ω`);
    }
  };

  const handleManageTokens = (student: Student) => {
    setSelectedStudentForTokens(student);
    setTokensModalOpen(true);
  };

  const handleSaveStudent = (studentData: StudentFormData) => {
    if (editingStudent) {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞:', { ...editingStudent, ...studentData });
      alert(`–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ "${studentData.fullName}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`);
    } else {
      // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
      const newLinn = `IV${String(Date.now()).slice(-6)}`;
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞:', { ...studentData, linn: newLinn });
      alert(`–£—á–µ–Ω–∏–∫ "${studentData.fullName}" –¥–æ–±–∞–≤–ª–µ–Ω! LINN: ${newLinn}`);
    }
  };

  const handleTokensOperation = (
    studentId: string, 
    operation: 'add' | 'subtract', 
    accountType: 'account' | 'credit', 
    amount: number, 
    comment: string
  ) => {
    // TODO: API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    const student = mockStudents.find(s => s.id === studentId);
    if (student) {
      const operationText = operation === 'add' ? '–Ω–∞—á–∏—Å–ª–µ–Ω–æ' : '—Å–ø–∏—Å–∞–Ω–æ';
      const accountText = accountType === 'account' ? '—Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ' : '–∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ';
      console.log(`–û–ø–µ—Ä–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏:`, {
        studentId,
        operation,
        accountType,
        amount,
        comment
      });
      alert(`${operationText} ${amount} L-Coin ${operation === 'add' ? '–Ω–∞' : '—Å'} ${accountText} —Å—á–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞ "${student.fullName}"`);
    }
  };

  const handleCloseAddStudentModal = () => {
    setAddStudentModalOpen(false);
    setEditingStudent(null);
  };

  const handleCloseTokensModal = () => {
    setTokensModalOpen(false);
    setSelectedStudentForTokens(null);
  };

  return (
    <div className="min-h-screen admin-container flex">
      {/* Sidebar */}
      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col lg:ml-0">
        {/* Header */}
        <header className="shadow" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-8">
              <div className="flex items-center">
                {/* –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
                <button
                  onClick={() => setSidebarOpen(true)}
                  className="lg:hidden p-2 rounded-md text-white hover:bg-white/20 mr-4"
                >
                  <span className="text-xl">‚ò∞</span>
                </button>
                
                <div>
                  <h1 className="text-2xl font-bold text-white">–£—á–µ–Ω–∏–∫–∏</h1>
                  <p className="text-white/90 font-medium">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <button
                  onClick={handleAddStudent}
                  className="admin-button-primary text-white px-4 py-2 rounded-md transition-colors"
                  style={{ 
                    backgroundColor: 'rgba(255, 255, 255, 0.2)',
                    border: '1px solid rgba(255, 255, 255, 0.3)'
                  }}
                  onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.3)'}
                  onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}
                >
                  –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main content */}
        <main className="flex-1 px-4 py-6 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
              <div className="admin-card">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                        <span className="text-white font-bold">üë•</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤</dt>
                        <dd className="text-lg font-medium text-gray-900">{totalStudents}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                        <span className="text-white font-bold">üí∞</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤</dt>
                        <dd className="text-lg font-medium text-gray-900">{totalTokens}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                        <span className="text-white font-bold">üìä</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å</dt>
                        <dd className="text-lg font-medium text-gray-900">{averageTokens}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="admin-card">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-md flex items-center justify-center" style={{ backgroundColor: 'var(--primary-burgundy)' }}>
                        <span className="text-white font-bold">üè¶</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium admin-text-secondary truncate">–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã</dt>
                        <dd className="text-lg font-medium text-gray-900">{totalCreditTokens}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
            <div className="admin-card mb-6">
              <div className="px-4 py-5 sm:p-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium admin-text-secondary mb-2">
                      –ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤
                    </label>
                    <input
                      type="text"
                      className="admin-input w-full"
                      placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ LINN..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium admin-text-secondary mb-2">
                      –ö–ª–∞—Å—Å
                    </label>
                    <select
                      className="admin-input w-full"
                      value={selectedClass}
                      onChange={(e) => setSelectedClass(e.target.value)}
                    >
                      {classes.map(cls => (
                        <option key={cls} value={cls}>{cls}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium admin-text-secondary mb-2">
                      –ö–æ—Ç—Ç–µ–¥–∂
                    </label>
                    <select
                      className="admin-input w-full"
                      value={selectedCottage}
                      onChange={(e) => setSelectedCottage(e.target.value)}
                    >
                      {cottages.map(cottage => (
                        <option key={cottage} value={cottage}>{cottage}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ —É—á–µ–Ω–∏–∫–æ–≤ */}
            <div className="admin-card">
              <div className="px-4 py-5 sm:p-6">
                <div className="sm:flex sm:items-center sm:justify-between mb-6">
                  <div>
                    <h3 className="text-lg leading-6 font-medium text-gray-900">
                      –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
                    </h3>
                    <p className="mt-1 max-w-2xl text-sm admin-text-secondary">
                      –ù–∞–π–¥–µ–Ω–æ: {filteredStudents.length} –∏–∑ {totalStudents} —É—á–µ–Ω–∏–∫–æ–≤
                    </p>
                  </div>
                  <div className="mt-4 sm:mt-0">
                    <button
                      onClick={handleAddStudent}
                      className="admin-button-primary inline-flex items-center px-4 py-2 text-sm font-medium rounded-md"
                      style={{ backgroundColor: 'var(--primary-burgundy)' }}
                    >
                      <span className="mr-2">üë•</span>
                      –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞
                    </button>
                  </div>
                </div>

                {filteredStudents.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="w-12 h-12 mx-auto mb-4 rounded-full flex items-center justify-center" style={{ backgroundColor: 'var(--background-gray)' }}>
                      <span className="text-2xl">üë•</span>
                    </div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">–£—á–µ–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p className="admin-text-secondary">
                      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.
                    </p>
                  </div>
                ) : (
                  <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                    <table className="min-w-full divide-y divide-gray-300">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            –§–∞–º–∏–ª–∏—è –ò–º—è
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            –ö–ª–∞—Å—Å
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            –ö–æ—Ç—Ç–µ–¥–∂
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            LINN
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            –ö–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ä–∞—Å—á–µ—Ç–Ω–æ–º —Å—á–µ—Ç–µ
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            –î–µ–π—Å—Ç–≤–∏—è
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {filteredStudents.map((student) => (
                          <tr key={student.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="flex items-center">
                                <div className="flex-shrink-0 h-10 w-10">
                                  <div className="h-10 w-10 rounded-full flex items-center justify-center" style={{ backgroundColor: 'var(--background-gray)' }}>
                                    <span className="text-lg">üë§</span>
                                  </div>
                                </div>
                                <div className="ml-4">
                                  <div className="text-sm font-medium text-gray-900">{student.fullName}</div>
                                  <div className="text-sm admin-text-secondary">{student.belongsTo}</div>
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                {student.class}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {student.cottage}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                              {student.linn}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900">
                                <span className="font-medium">{student.accountTokens}</span> L-Coin
                                {student.creditTokens > 0 && (
                                  <div className="text-xs admin-text-secondary">
                                    –ö—Ä–µ–¥–∏—Ç: {student.creditTokens} L-Coin
                                  </div>
                                )}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                              <div className="flex items-center space-x-2">
                                <button
                                  onClick={() => handleEditStudent(student)}
                                  className="p-2 text-blue-600 hover:bg-blue-50 rounded"
                                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                                >
                                  ‚úèÔ∏è
                                </button>
                                <button
                                  onClick={() => handleManageTokens(student)}
                                  className="p-2 text-green-600 hover:bg-green-50 rounded"
                                  title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏"
                                >
                                  üí∞
                                </button>
                                <button
                                  onClick={() => handleDeleteStudent(student)}
                                  className="p-2 text-red-600 hover:bg-red-50 rounded"
                                  title="–£–¥–∞–ª–∏—Ç—å"
                                >
                                  üóëÔ∏è
                                </button>
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <AddStudentModal 
        isOpen={addStudentModalOpen}
        onClose={handleCloseAddStudentModal}
        student={editingStudent}
        onSave={handleSaveStudent}
      />

      <TokensModal 
        isOpen={tokensModalOpen}
        onClose={handleCloseTokensModal}
        student={selectedStudentForTokens}
        onSave={handleTokensOperation}
      />
    </div>
  );
} 