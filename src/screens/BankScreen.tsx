import React from 'react'
import { ScrollView, View, Alert, TouchableOpacity, StyleSheet } from 'react-native'
import { Button } from '../components/ui/Button'
import { Card } from '../components/ui/Card'
import { Typography, Heading, Label, Caption } from '../components/ui/Typography'
import { theme } from '../styles/unistyles'

interface Transaction {
  id: string
  type: 'income' | 'expense'
  amount: number
  description: string
  date: string
  time: string
  note?: string
}

export const BankScreen: React.FC = () => {
  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
  const innl = '459183'
  const checkingAccountNumber = '40817810570000123456'
  const creditAccountNumber = '40817810570000654321'
  const checkingBalance = 2450 // L-Coin
  const creditLimit = 1000 // L-Coin
  const creditUsed = 250 // L-Coin
  const creditAvailable = creditLimit - creditUsed
  const notificationCount = 3
  
  const recentTransactions: Transaction[] = [
    {
      id: '1',
      type: 'income',
      amount: 200,
      description: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ª–∏–º–ø–∏–∞–¥–µ',
      date: '15.01.2025',
      time: '14:30',
      note: '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ'
    },
    {
      id: '2',
      type: 'expense',
      amount: 150,
      description: '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ L-shop',
      date: '14.01.2025',
      time: '16:45',
      note: '–ü–æ–∫—É–ø–∫–∞ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤'
    },
    {
      id: '3',
      type: 'income',
      amount: 100,
      description: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ',
      date: '13.01.2025',
      time: '18:00',
    },
    {
      id: '4',
      type: 'expense',
      amount: 75,
      description: '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —É—Å–ª—É–≥–∏ —Å—Ç–æ–ª–æ–≤–æ–π',
      date: '12.01.2025',
      time: '12:30',
      note: '–û–±–µ–¥'
    },
    {
      id: '5',
      type: 'income',
      amount: 300,
      description: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏',
      date: '10.01.2025',
      time: '09:00',
      note: '–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —É—á–µ–±—É'
    }
  ]

  const handleNotificationPress = (): void => {
    Alert.alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', `–£ –≤–∞—Å ${notificationCount} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)
  }

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.content}>
      {/* –®–∞–ø–∫–∞ (Header) */}
      <View style={styles.header}>
        <Heading level={2} color="white" align="center">
          –õ–∏—Ü–µ–π—Å–∫–∏–π –±–∞–Ω–∫
        </Heading>
        <TouchableOpacity style={styles.notificationButton} onPress={handleNotificationPress}>
          <View style={styles.notificationIcon}>
            <Typography variant="body" color="white">üîî</Typography>
            {notificationCount > 0 && (
              <View style={styles.notificationBadge}>
                <Typography variant="caption" color="white" weight="bold">
                  {notificationCount}
                </Typography>
              </View>
            )}
          </View>
        </TouchableOpacity>
      </View>

      {/* –ë–ª–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞ */}
      <View style={styles.identificationSection}>
        <Typography variant="body" color="muted">
          –ò–ù–ù–õ: {innl}
        </Typography>
      </View>

      {/* –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞ */}
      <Card variant="elevated" style={styles.accountCard}>
        <Card.Body>
          <View style={styles.accountHeader}>
            <Heading level={4} color="primary">
              –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç ‚Ññ {checkingAccountNumber.slice(-8)}
            </Heading>
          </View>
          <View style={styles.balanceSection}>
            <Typography variant="h1" color="primary" weight="bold">
              {checkingBalance.toLocaleString()} L-Coin
            </Typography>
          </View>
        </Card.Body>
      </Card>

      {/* –ë–ª–æ–∫ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞ */}
      <Card variant="outlined" style={styles.creditCard}>
        <Card.Body>
          <View style={styles.accountHeader}>
            <View style={styles.creditHeaderRow}>
              <Heading level={4} color="primary">
                –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á—ë—Ç ‚Ññ {creditAccountNumber.slice(-8)}
              </Heading>
              <TouchableOpacity style={styles.warningIcon}>
                <Typography variant="body" color="error">‚ö†Ô∏è</Typography>
              </TouchableOpacity>
            </View>
          </View>
          <View style={styles.creditDetails}>
            <View style={styles.creditItem}>
              <Label color="muted">–î–æ—Å—Ç—É–ø–Ω–æ:</Label>
              <Typography variant="h4" color="secondary" weight="bold">
                {creditAvailable.toLocaleString()} L-Coin
              </Typography>
            </View>
            <View style={styles.creditItem}>
              <Label color="muted">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</Label>
              <Typography variant="h4" color="error" weight="bold">
                {creditUsed.toLocaleString()} L-Coin
              </Typography>
            </View>
          </View>
        </Card.Body>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π */}
      <View style={styles.historySection}>
        <Heading level={3} color="primary">
          –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        </Heading>
        
        {recentTransactions.map((transaction) => (
          <Card key={transaction.id} variant="standard" style={styles.transactionCard}>
            <Card.Body>
              <View style={styles.transactionRow}>
                <View style={styles.transactionInfo}>
                  <View style={styles.transactionHeader}>
                    <Typography 
                      variant="body" 
                      color={transaction.type === 'income' ? 'secondary' : 'error'}
                      weight="bold"
                    >
                      {transaction.type === 'income' ? '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ' : '–°–ø–∏—Å–∞–Ω–∏–µ'}
                    </Typography>
                    <Typography 
                      variant="h4" 
                      color={transaction.type === 'income' ? 'secondary' : 'error'}
                      weight="bold"
                    >
                      {transaction.type === 'income' ? '+' : '-'}{transaction.amount} L-Coin
                    </Typography>
                  </View>
                  
                  <Label color="default">{transaction.description}</Label>
                  
                  <View style={styles.transactionMeta}>
                    <Caption color="muted">{transaction.date} –≤ {transaction.time}</Caption>
                  </View>
                  
                  {transaction.note && (
                    <View style={styles.transactionNote}>
                      <Caption color="muted">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {transaction.note}</Caption>
                    </View>
                  )}
                </View>
              </View>
            </Card.Body>
          </Card>
        ))}
        
        <View style={styles.showMoreContainer}>
          <Button
            variant="ghost"
            size="medium"
            onPress={() => Alert.alert('–ò—Å—Ç–æ—Ä–∏—è', '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π')}
          >
            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          </Button>
        </View>
      </View>
    </ScrollView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.ultraLight,
  },
  content: {
    paddingBottom: theme.spacing.xxxl,
  },
  
  // –®–∞–ø–∫–∞
  header: {
    backgroundColor: theme.colors.primary,
    paddingTop: theme.spacing.xl + 40, // –£—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
    paddingBottom: theme.spacing.lg,
    paddingHorizontal: theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  notificationButton: {
    position: 'absolute',
    right: theme.spacing.lg,
    top: theme.spacing.xl + 40,
  },
  notificationIcon: {
    position: 'relative',
    alignItems: 'center',
    justifyContent: 'center',
  },
  notificationBadge: {
    position: 'absolute',
    top: -8,
    right: -8,
    backgroundColor: theme.colors.error,
    borderRadius: theme.borderRadius.full,
    minWidth: 20,
    height: 20,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: theme.spacing.xs,
  },
  
  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  identificationSection: {
    paddingHorizontal: theme.spacing.lg,
    paddingVertical: theme.spacing.md,
    backgroundColor: theme.colors.white,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.divider,
  },
  
  // –°—á–µ—Ç–∞
  accountCard: {
    marginHorizontal: theme.spacing.lg,
    marginTop: theme.spacing.lg,
    backgroundColor: theme.colors.white,
  },
  creditCard: {
    marginHorizontal: theme.spacing.lg,
    marginTop: theme.spacing.md,
    backgroundColor: theme.colors.ultraLight,
    borderColor: theme.colors.warning,
    borderWidth: 1,
  },
  accountHeader: {
    marginBottom: theme.spacing.md,
  },
  creditHeaderRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  warningIcon: {
    padding: theme.spacing.xs,
  },
  balanceSection: {
    alignItems: 'center',
    paddingVertical: theme.spacing.lg,
  },
  creditDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingTop: theme.spacing.md,
  },
  creditItem: {
    flex: 1,
    alignItems: 'center',
  },
  
  // –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
  historySection: {
    marginTop: theme.spacing.xl,
    paddingHorizontal: theme.spacing.lg,
  },
  transactionCard: {
    marginVertical: theme.spacing.sm,
    backgroundColor: theme.colors.white,
  },
  transactionRow: {
    flexDirection: 'row',
  },
  transactionInfo: {
    flex: 1,
  },
  transactionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: theme.spacing.xs,
  },
  transactionMeta: {
    marginTop: theme.spacing.xs,
  },
  transactionNote: {
    marginTop: theme.spacing.xs,
    paddingTop: theme.spacing.xs,
    borderTopWidth: 1,
    borderTopColor: theme.colors.divider,
  },
  showMoreContainer: {
    alignItems: 'center',
    marginTop: theme.spacing.lg,
  },
}) 