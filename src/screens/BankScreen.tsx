import React, { useState } from 'react'
import { ScrollView, View, Alert } from 'react-native'
import { createStyleSheet, useStyles } from 'react-native-unistyles'
import { Button } from '../components/ui/Button'
import { Card } from '../components/ui/Card'
import { Input } from '../components/ui/Input'
import { Typography, Heading, Paragraph, Label, Caption } from '../components/ui/Typography'

interface Transaction {
  id: string
  type: 'income' | 'expense'
  amount: number
  description: string
  date: string
  category: string
}

export const BankScreen: React.FC = () => {
  const { styles } = useStyles(stylesheet)
  const [transferAmount, setTransferAmount] = useState('')
  const [recipientId, setRecipientId] = useState('')
  
  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
  const balance = 2450
  const savings = 1200
  const monthlyIncome = 850
  
  const recentTransactions: Transaction[] = [
    {
      id: '1',
      type: 'income',
      amount: 200,
      description: '–°—Ç–∏–ø–µ–Ω–¥–∏—è –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —É—á–µ–±—É',
      date: '2025-01-15',
      category: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
    },
    {
      id: '2',
      type: 'expense',
      amount: 150,
      description: '–ü–æ–∫—É–ø–∫–∞ –≤ L-shop',
      date: '2025-01-14',
      category: '–ü–æ–∫—É–ø–∫–∏'
    },
    {
      id: '3',
      type: 'income',
      amount: 100,
      description: '–£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏',
      date: '2025-01-13',
      category: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    }
  ]

  const handleQuickAction = (action: string): void => {
    Alert.alert('–î–µ–π—Å—Ç–≤–∏–µ', `–í—ã–ø–æ–ª–Ω—è–µ–º: ${action}`)
  }

  const handleTransfer = (): void => {
    if (!transferAmount || !recipientId) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
      return
    }
    Alert.alert('–ü–µ—Ä–µ–≤–æ–¥', `–ü–µ—Ä–µ–≤–æ–¥–∏–º ${transferAmount} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`)
    setTransferAmount('')
    setRecipientId('')
  }

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.content}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <View style={styles.headerSection}>
        <Heading level={1} color="primary">
          üí≥ –õ–∏—Ü–µ–π—Å–∫–∏–π –±–∞–Ω–∫
        </Heading>
        <Paragraph color="muted">
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ª–∏—Ü–µ–π—Å–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏
        </Paragraph>
      </View>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å */}
      <Card variant="elevated" style={styles.balanceCard}>
        <Card.Body>
          <View style={styles.balanceHeader}>
            <Typography variant="h1" color="primary">
              {balance.toLocaleString()}
            </Typography>
            <Caption color="muted">–õ–∏—Ü–µ–π—Å–∫–∏—Ö –±–∞–ª–ª–æ–≤</Caption>
          </View>
          
          <View style={styles.balanceDetails}>
            <View style={styles.balanceItem}>
              <Typography variant="h4" color="secondary">
                {savings.toLocaleString()}
              </Typography>
              <Caption>–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è</Caption>
            </View>
            
            <View style={styles.balanceItem}>
              <Typography variant="h4" color="primary">
                +{monthlyIncome}
              </Typography>
              <Caption>–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü</Caption>
            </View>
          </View>
        </Card.Body>
      </Card>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <View style={styles.quickActionsSection}>
        <Heading level={3}>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</Heading>
        
        <View style={styles.quickActionsGrid}>
          <Button
            variant="secondary"
            size="medium"
            onPress={() => handleQuickAction('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç')}
            style={styles.quickActionButton}
          >
            üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å
          </Button>
          
          <Button
            variant="secondary"
            size="medium"
            onPress={() => handleQuickAction('–û–ø–ª–∞—Ç–∏—Ç—å –≤ —Å—Ç–æ–ª–æ–≤–æ–π')}
            style={styles.quickActionButton}
          >
            üçΩÔ∏è –°—Ç–æ–ª–æ–≤–∞—è
          </Button>
          
          <Button
            variant="secondary"
            size="medium"
            onPress={() => handleQuickAction('QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã')}
            style={styles.quickActionButton}
          >
            üì± QR-–∫–æ–¥
          </Button>
          
          <Button
            variant="secondary"
            size="medium"
            onPress={() => handleQuickAction('–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π')}
            style={styles.quickActionButton}
          >
            üìã –ò—Å—Ç–æ—Ä–∏—è
          </Button>
        </View>
      </View>

      {/* –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ */}
      <Card variant="outlined" style={styles.transferCard}>
        <Card.Header>
          <Heading level={4}>üí∏ –ü–µ—Ä–µ–≤–æ–¥ –±–∞–ª–ª–æ–≤</Heading>
        </Card.Header>
        
        <Card.Body>
          <View style={styles.transferForm}>
            <Input
              label="–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
              placeholder="ID –∏–ª–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
              variant="outlined"
              value={recipientId}
              onChangeText={setRecipientId}
            />
            
            <Input
              label="–°—É–º–º–∞"
              placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"
              variant="outlined"
              value={transferAmount}
              onChangeText={setTransferAmount}
              keyboardType="numeric"
            />
            
            <Button
              variant="primary"
              size="medium"
              onPress={handleTransfer}
            >
              –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
            </Button>
          </View>
        </Card.Body>
      </Card>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
      <View style={styles.transactionsSection}>
        <Heading level={3}>üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</Heading>
        
        {recentTransactions.map((transaction) => (
          <Card key={transaction.id} variant="standard" style={styles.transactionCard}>
            <Card.Body>
              <View style={styles.transactionRow}>
                <View style={styles.transactionInfo}>
                  <Label color="default">{transaction.description}</Label>
                  <Caption color="muted">{transaction.category} ‚Ä¢ {transaction.date}</Caption>
                </View>
                
                <View style={styles.transactionAmount}>
                  <Typography 
                    variant="body" 
                    color={transaction.type === 'income' ? 'secondary' : 'error'}
                    weight="bold"
                  >
                    {transaction.type === 'income' ? '+' : '-'}{transaction.amount}
                  </Typography>
                </View>
              </View>
            </Card.Body>
          </Card>
        ))}
        
        <Button
          variant="ghost"
          size="medium"
          onPress={() => handleQuickAction('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}
        >
          –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        </Button>
      </View>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Card variant="elevated" style={styles.statsCard}>
        <Card.Header>
          <Heading level={4}>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Heading>
        </Card.Header>
        
        <Card.Body>
          <View style={styles.statsGrid}>
            <View style={styles.statItem}>
              <Typography variant="h3" color="primary" align="center">
                12
              </Typography>
              <Caption align="center">–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</Caption>
            </View>
            
            <View style={styles.statItem}>
              <Typography variant="h3" color="secondary" align="center">
                85%
              </Typography>
              <Caption align="center">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</Caption>
            </View>
            
            <View style={styles.statItem}>
              <Typography variant="h3" color="primary" align="center">
                24
              </Typography>
              <Caption align="center">–û–ø–µ—Ä–∞—Ü–∏–π –≤ –º–µ—Å—è—Ü</Caption>
            </View>
          </View>
        </Card.Body>
      </Card>
    </ScrollView>
  )
}

const stylesheet = createStyleSheet((theme) => ({
  container: {
    flex: 1,
    backgroundColor: theme.colors.ultraLight,
  },
  content: {
    padding: theme.spacing.lg,
    paddingBottom: theme.spacing.xxxl,
  },
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  headerSection: {
    marginBottom: theme.spacing.xl,
    paddingTop: theme.spacing.lg,
  },
  
  // –ë–∞–ª–∞–Ω—Å
  balanceCard: {
    marginBottom: theme.spacing.xl,
    backgroundColor: theme.colors.primary,
  },
  balanceHeader: {
    alignItems: 'center',
    marginBottom: theme.spacing.lg,
  },
  balanceDetails: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  balanceItem: {
    alignItems: 'center',
  },
  
  // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  quickActionsSection: {
    marginBottom: theme.spacing.xl,
  },
  quickActionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: theme.spacing.sm,
    marginTop: theme.spacing.md,
  },
  quickActionButton: {
    flex: 1,
    minWidth: '45%',
  },
  
  // –ü–µ—Ä–µ–≤–æ–¥
  transferCard: {
    marginBottom: theme.spacing.xl,
  },
  transferForm: {
    gap: theme.spacing.md,
  },
  
  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  transactionsSection: {
    marginBottom: theme.spacing.xl,
  },
  transactionCard: {
    marginVertical: theme.spacing.sm,
  },
  transactionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  transactionInfo: {
    flex: 1,
  },
  transactionAmount: {
    alignItems: 'flex-end',
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  statsCard: {
    marginBottom: theme.spacing.xl,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
    flex: 1,
  },
})) 