import React, { useState } from 'react'
import { View, Text, ScrollView, TouchableOpacity, StyleSheet } from 'react-native'

interface RuleSection {
  id: string
  title: string
  icon: string
  content: string[]
  important?: boolean
  lastUpdated?: string
}

const ruleSections: RuleSection[] = [
  {
    id: 'general',
    title: '–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è',
    icon: 'üìã',
    content: [
      '–õ–∏—Ü–µ–π-–∏–Ω—Ç–µ—Ä–Ω–∞—Ç "–ü–æ–¥–º–æ—Å–∫–æ–≤–Ω—ã–π" —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º —Å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ–º —É—á–∞—â–∏—Ö—Å—è.',
      '–í—Å–µ —É—á–∞—â–∏–µ—Å—è –æ–±—è–∑–∞–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞, —É–≤–∞–∂–∞—Ç—å –ø—Ä–∞–≤–∞ –∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.',
      '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ—Å—É—Ç –∫–∞–∫ —É—á–∞—â–∏–µ—Å—è, —Ç–∞–∫ –∏ –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–∏ (–∑–∞–∫–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏).',
      '–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–µ.'
    ],
    important: false,
    lastUpdated: '2024-01-15'
  },
  {
    id: 'study',
    title: '–£—á–µ–±–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    icon: 'üìö',
    content: [
      '–ü–æ—Å–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º. –ü—Ä–æ–ø—É—Å–∫–∏ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º.',
      '–£—á–∞—â–∏–µ—Å—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ —É—Ä–æ–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏, —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.',
      '–ù–∞ —É—Ä–æ–∫–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Ö–æ–¥ –∑–∞–Ω—è—Ç–∏–π –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏.',
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.',
      '–ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∑–∞—Ä–∞–Ω–µ–µ.'
    ],
    important: true,
    lastUpdated: '2024-02-01'
  },
  {
    id: 'behavior',
    title: '–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞',
    icon: 'ü§ù',
    content: [
      '–£—á–∞—â–∏–µ—Å—è –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—è–≤–ª—è—Ç—å —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—à–∏–º, –±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º–∏ —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.',
      '–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ —Ñ–æ—Ä–º—ã —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å–∏–ª–∏—è, —É–Ω–∏–∂–µ–Ω–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞.',
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ª–∏—Ü–µ—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.',
      '–£—á–∞—â–∏–µ—Å—è –¥–æ–ª–∂–Ω—ã –±–µ—Ä–µ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –∏–º—É—â–µ—Å—Ç–≤—É –ª–∏—Ü–µ—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —á–∏—Å—Ç–æ—Ç—É –∏ –ø–æ—Ä—è–¥–æ–∫.',
      '–ö—É—Ä–µ–Ω–∏–µ, —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –∏ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.'
    ],
    important: true,
    lastUpdated: '2024-01-20'
  },
  {
    id: 'dormitory',
    title: '–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–∂–∏—Ç–∏—è',
    icon: 'üè†',
    content: [
      '–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–Ω—è —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏.',
      '–û—Ç–±–æ–π –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏ –≤ 22:30, –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ - –≤ 23:00. –ü–æ–¥—ä–µ–º –≤ 7:00.',
      '–ü–æ—Å–µ—â–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ–ª–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.',
      '–ö–∞–∂–¥—ã–π —É—á–∞—â–∏–π—Å—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —á–∏—Å—Ç–æ—Ç—É –∏ –ø–æ—Ä—è–¥–æ–∫ –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ –∏ –º–µ—Å—Ç–∞—Ö –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.',
      '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∏—â–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–≤–µ–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.',
      '–í—ã–Ω–æ—Å –º–µ–±–µ–ª–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–º–Ω–∞—Ç –∑–∞–ø—Ä–µ—â–µ–Ω.'
    ],
    important: false,
    lastUpdated: '2024-01-10'
  },
  {
    id: 'digital',
    title: '–¶–∏—Ñ—Ä–æ–≤–∞—è —ç—Ç–∏–∫–∞',
    icon: 'üíª',
    content: [
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ª–∏—Ü–µ—è –¥–æ–ª–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º.',
      '–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –≤ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –ª–∏—Ü–µ—è.',
      '–£—á–∞—â–∏–µ—Å—è –æ–±—è–∑–∞–Ω—ã –±–µ—Ä–µ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —É—á–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.',
      '–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ü–µ–ª–µ–π, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.'
    ],
    important: true,
    lastUpdated: '2024-02-10'
  },
  {
    id: 'republic',
    title: '–õ–∏—Ü–µ–π—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞',
    icon: 'üèõÔ∏è',
    content: [
      '–í—Å–µ —É—á–∞—â–∏–µ—Å—è –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–µ–π—Å–∫–æ–π —Ä–µ—Å–ø—É–±–ª–∏–∫–∏.',
      '–í—ã–±–æ—Ä—ã –≤ –æ—Ä–≥–∞–Ω—ã —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –Ω–∞ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å–Ω–æ–≤–µ.',
      '–†–µ—à–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–æ–≤ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–º–∏ —É—á–∞—â–∏–º–∏—Å—è.',
      '–ö–∞–∂–¥—ã–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤—ã–¥–≤–∏–≥–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–∏.',
      '–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Å–ø—É–±–ª–∏–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—Ü–µ—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ–±—É—á–µ–Ω–∏—è.'
    ],
    important: false,
    lastUpdated: '2024-01-25'
  },
  {
    id: 'violations',
    title: '–ù–∞—Ä—É—à–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
    icon: '‚ö†Ô∏è',
    content: [
      '–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä—ã: –∑–∞–º–µ—á–∞–Ω–∏–µ, –≤—ã–≥–æ–≤–æ—Ä, –æ—Ç—á–∏—Å–ª–µ–Ω–∏–µ.',
      '–°–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–º —Å–æ–≤–µ—Ç–æ–º —Å —É—á–∞—Å—Ç–∏–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π.',
      '–ü—Ä–∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ –¥—Ä—É–≥–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ.',
      '–£—á–∞—â–∏–µ—Å—è –∏ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ—Ä –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.',
      '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§.'
    ],
    important: true,
    lastUpdated: '2024-02-05'
  }
]

export const RulesScreen: React.FC = () => {
  const [selectedSection, setSelectedSection] = useState<string>('general')
  const [readSections, setReadSections] = useState<Set<string>>(new Set())
  const [showConfirmation, setShowConfirmation] = useState(false)

  const handleSectionRead = (sectionId: string) => {
    setReadSections(prev => new Set([...prev, sectionId]))
  }

  const handleAcceptRules = () => {
    setShowConfirmation(true)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    setTimeout(() => setShowConfirmation(false), 2000)
  }

  const getCurrentSection = () => {
    return ruleSections.find(section => section.id === selectedSection) || ruleSections[0]
  }

  const allSectionsRead = ruleSections.every(section => readSections.has(section.id))

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>–ü—Ä–∞–≤–∏–ª–∞ –ª–∏—Ü–µ—è</Text>
        <Text style={styles.headerSubtitle}>
          –ò–∑—É—á–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        </Text>
        
        <View style={styles.progressContainer}>
          <View style={styles.progressBar}>
            <View style={[
              styles.progressFill,
              { width: `${(readSections.size / ruleSections.length) * 100}%` }
            ]} />
          </View>
          <Text style={styles.progressText}>
            {readSections.size} –∏–∑ {ruleSections.length} —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
          </Text>
        </View>
      </View>

      <View style={styles.content}>
        {/* Navigation */}
        <View style={styles.navigation}>
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.navigationList}
          >
            {ruleSections.map(section => (
              <TouchableOpacity
                key={section.id}
                style={[
                  styles.navButton,
                  selectedSection === section.id && styles.activeNavButton,
                  readSections.has(section.id) && styles.readNavButton
                ]}
                onPress={() => setSelectedSection(section.id)}
              >
                <View style={styles.navButtonContent}>
                  <Text style={[
                    styles.navIcon,
                    selectedSection === section.id && styles.activeNavIcon
                  ]}>
                    {section.icon}
                  </Text>
                  
                  <Text style={[
                    styles.navText,
                    selectedSection === section.id && styles.activeNavText
                  ]}>
                    {section.title}
                  </Text>
                  
                  {section.important && (
                    <View style={styles.importantBadge}>
                      <Text style={styles.importantText}>!</Text>
                    </View>
                  )}
                  
                  {readSections.has(section.id) && (
                    <View style={styles.readBadge}>
                      <Text style={styles.readIcon}>‚úì</Text>
                    </View>
                  )}
                </View>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* Section Content */}
        <ScrollView style={styles.sectionContent}>
          <View style={styles.sectionHeader}>
            <View style={styles.sectionTitleRow}>
              <Text style={styles.sectionIcon}>{getCurrentSection().icon}</Text>
              <View style={styles.sectionTitleContainer}>
                <Text style={styles.sectionTitle}>{getCurrentSection().title}</Text>
                {getCurrentSection().important && (
                  <View style={styles.importantLabel}>
                    <Text style={styles.importantLabelText}>–í–∞–∂–Ω–æ</Text>
                  </View>
                )}
              </View>
            </View>
            
            {getCurrentSection().lastUpdated && (
              <Text style={styles.lastUpdated}>
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(getCurrentSection().lastUpdated!).toLocaleDateString('ru-RU')}
              </Text>
            )}
          </View>

          <View style={styles.contentList}>
            {getCurrentSection().content.map((item, index) => (
              <View key={index} style={styles.contentItem}>
                <View style={styles.bulletPoint}>
                  <Text style={styles.bulletText}>{index + 1}</Text>
                </View>
                <Text style={styles.contentText}>{item}</Text>
              </View>
            ))}
          </View>

          {!readSections.has(selectedSection) && (
            <TouchableOpacity 
              style={styles.markReadButton}
              onPress={() => handleSectionRead(selectedSection)}
            >
              <Text style={styles.markReadIcon}>‚úì</Text>
              <Text style={styles.markReadText}>–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ</Text>
            </TouchableOpacity>
          )}

          {readSections.has(selectedSection) && (
            <View style={styles.readConfirmation}>
              <Text style={styles.readConfirmationIcon}>‚úÖ</Text>
              <Text style={styles.readConfirmationText}>–†–∞–∑–¥–µ–ª –ø—Ä–æ—á–∏—Ç–∞–Ω</Text>
            </View>
          )}
        </ScrollView>
      </View>

      {/* Accept Rules Button */}
      {allSectionsRead && (
        <View style={styles.acceptContainer}>
          <TouchableOpacity 
            style={styles.acceptButton}
            onPress={handleAcceptRules}
          >
            <Text style={styles.acceptButtonText}>
              –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –æ–±—è–∑—É—é—Å—å –∏—Ö —Å–æ–±–ª—é–¥–∞—Ç—å
            </Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Confirmation Modal */}
      {showConfirmation && (
        <View style={styles.confirmationOverlay}>
          <View style={styles.confirmationModal}>
            <Text style={styles.confirmationIcon}>‚úÖ</Text>
            <Text style={styles.confirmationTitle}>–û—Ç–ª–∏—á–Ω–æ!</Text>
            <Text style={styles.confirmationMessage}>
              –í—ã —É—Å–ø–µ—à–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ª–∏—Ü–µ—è
            </Text>
          </View>
        </View>
      )}
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 16,
    paddingVertical: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#333333',
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 16,
  },
  progressContainer: {
    marginTop: 8,
  },
  progressBar: {
    height: 6,
    backgroundColor: '#E0E0E0',
    borderRadius: 3,
    overflow: 'hidden',
    marginBottom: 8,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#8B2439',
    borderRadius: 3,
  },
  progressText: {
    fontSize: 12,
    color: '#666666',
    textAlign: 'center',
  },
  content: {
    flex: 1,
  },
  navigation: {
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  navigationList: {
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  navButton: {
    marginRight: 12,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    backgroundColor: '#F8F8F8',
    minWidth: 120,
  },
  activeNavButton: {
    backgroundColor: '#8B2439',
    borderColor: '#8B2439',
  },
  readNavButton: {
    borderColor: '#4CAF50',
    backgroundColor: '#F0F8F0',
  },
  navButtonContent: {
    padding: 12,
    alignItems: 'center',
    position: 'relative',
  },
  navIcon: {
    fontSize: 20,
    marginBottom: 6,
  },
  activeNavIcon: {
    color: '#FFFFFF',
  },
  navText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#333333',
    textAlign: 'center',
  },
  activeNavText: {
    color: '#FFFFFF',
  },
  importantBadge: {
    position: 'absolute',
    top: 4,
    right: 4,
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: '#E74C3C',
    justifyContent: 'center',
    alignItems: 'center',
  },
  importantText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '600',
  },
  readBadge: {
    position: 'absolute',
    top: 4,
    right: 4,
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
  },
  readIcon: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '600',
  },
  sectionContent: {
    flex: 1,
  },
  sectionHeader: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  sectionTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  sectionIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  sectionTitleContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333333',
    marginRight: 12,
  },
  importantLabel: {
    backgroundColor: '#E74C3C',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 2,
  },
  importantLabelText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '600',
  },
  lastUpdated: {
    fontSize: 12,
    color: '#999999',
  },
  contentList: {
    padding: 16,
  },
  contentItem: {
    flexDirection: 'row',
    marginBottom: 16,
    alignItems: 'flex-start',
  },
  bulletPoint: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#8B2439',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
    marginTop: 2,
  },
  bulletText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  contentText: {
    flex: 1,
    fontSize: 15,
    color: '#333333',
    lineHeight: 22,
  },
  markReadButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#8B2439',
    borderRadius: 12,
    paddingVertical: 16,
    marginHorizontal: 16,
    marginBottom: 16,
  },
  markReadIcon: {
    color: '#FFFFFF',
    fontSize: 16,
    marginRight: 8,
  },
  markReadText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  readConfirmation: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#F0F8F0',
    borderRadius: 12,
    paddingVertical: 16,
    marginHorizontal: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#4CAF50',
  },
  readConfirmationIcon: {
    fontSize: 16,
    marginRight: 8,
  },
  readConfirmationText: {
    color: '#4CAF50',
    fontSize: 16,
    fontWeight: '600',
  },
  acceptContainer: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#EEEEEE',
  },
  acceptButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  acceptButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
    lineHeight: 22,
  },
  confirmationOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  confirmationModal: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 32,
    alignItems: 'center',
    marginHorizontal: 32,
  },
  confirmationIcon: {
    fontSize: 48,
    marginBottom: 16,
  },
  confirmationTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  confirmationMessage: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
  },
})

export default RulesScreen 