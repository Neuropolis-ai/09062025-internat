'use client';

import React, { useState } from 'react';
import Modal from './ui/Modal';

interface Student {
  id: string;
  fullName: string;
  class: string;
  cottage: string;
  linn: string;
  accountTokens: number;
  creditTokens: number;
  achievements: string[];
  positions: string[];
  belongsTo: string;
  createdAt: string;
}

interface TokensModalProps {
  isOpen: boolean;
  onClose: () => void;
  student: Student | null;
  onSave: (studentId: string, operation: 'add' | 'subtract', accountType: 'account' | 'credit', amount: number, comment: string) => void;
}

export default function TokensModal({ isOpen, onClose, student, onSave }: TokensModalProps) {
  const [operation, setOperation] = useState<'add' | 'subtract'>('add');
  const [accountType, setAccountType] = useState<'account' | 'credit'>('account');
  const [amount, setAmount] = useState<number>(0);
  const [comment, setComment] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!student) return;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (amount <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ç–æ–∫–µ–Ω–æ–≤');
      return;
    }
    
    if (!comment.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è
    if (operation === 'subtract') {
      const currentBalance = accountType === 'account' ? student.accountTokens : student.creditTokens;
      if (amount > currentBalance) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω–æ: ${currentBalance} L-Coin`);
        return;
      }
    }

    onSave(student.id, operation, accountType, amount, comment);
    
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setOperation('add');
    setAccountType('account');
    setAmount(0);
    setComment('');
    
    onClose();
  };

  const getOperationText = () => {
    return operation === 'add' ? '–ù–∞—á–∏—Å–ª–∏—Ç—å' : '–°–ø–∏—Å–∞—Ç—å';
  };

  const getAccountTypeText = () => {
    return accountType === 'account' ? '—Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞' : '–∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞';
  };

  const getCurrentBalance = () => {
    if (!student) return 0;
    return accountType === 'account' ? student.accountTokens : student.creditTokens;
  };

  const getNewBalance = () => {
    const currentBalance = getCurrentBalance();
    if (operation === 'add') {
      return currentBalance + amount;
    } else {
      return Math.max(0, currentBalance - amount);
    }
  };

  if (!student) return null;

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose}
      title={`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏: ${student.fullName}`}
      maxWidth="lg"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ */}
        <div className="p-4 rounded-lg" style={{ backgroundColor: 'var(--background-gray)' }}>
          <h4 className="text-sm font-medium text-gray-900 mb-3">–¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã</h4>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center justify-between">
              <span className="admin-text-secondary">–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç:</span>
              <span className="font-medium text-gray-900">{student.accountTokens} L-Coin</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="admin-text-secondary">–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á–µ—Ç:</span>
              <span className="font-medium text-gray-900">{student.creditTokens} L-Coin</span>
            </div>
          </div>
        </div>

        {/* –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        <div>
          <label className="block text-sm font-medium admin-text-secondary mb-3">
            –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ *
          </label>
          <div className="grid grid-cols-2 gap-4">
            <button
              type="button"
              onClick={() => setOperation('add')}
              className={`p-4 rounded-lg border text-center transition-colors ${
                operation === 'add' 
                  ? 'border-green-500 bg-green-50 text-green-700' 
                  : 'border-gray-300 hover:bg-gray-50'
              }`}
            >
              <div className="text-2xl mb-2">‚ûï</div>
              <div className="font-medium">–ù–∞—á–∏—Å–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã</div>
              <div className="text-sm admin-text-secondary">–î–æ–±–∞–≤–∏—Ç—å L-Coin –Ω–∞ —Å—á–µ—Ç</div>
            </button>
            
            <button
              type="button"
              onClick={() => setOperation('subtract')}
              className={`p-4 rounded-lg border text-center transition-colors ${
                operation === 'subtract' 
                  ? 'border-red-500 bg-red-50 text-red-700' 
                  : 'border-gray-300 hover:bg-gray-50'
              }`}
            >
              <div className="text-2xl mb-2">‚ûñ</div>
              <div className="font-medium">–°–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω—ã</div>
              <div className="text-sm admin-text-secondary">–°–Ω—è—Ç—å L-Coin —Å–æ —Å—á–µ—Ç–∞</div>
            </button>
          </div>
        </div>

        {/* –¢–∏–ø —Å—á–µ—Ç–∞ */}
        <div>
          <label className="block text-sm font-medium admin-text-secondary mb-2">
            –¢–∏–ø —Å—á–µ—Ç–∞ *
          </label>
          <select
            required
            className="admin-input w-full"
            value={accountType}
            onChange={(e) => setAccountType(e.target.value as 'account' | 'credit')}
          >
            <option value="account">üí∞ –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç ({student.accountTokens} L-Coin)</option>
            <option value="credit">üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á–µ—Ç ({student.creditTokens} L-Coin)</option>
          </select>
        </div>

        {/* –°—É–º–º–∞ */}
        <div>
          <label className="block text-sm font-medium admin-text-secondary mb-2">
            –°—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ *
          </label>
          <input
            type="number"
            required
            min="1"
            step="1"
            className="admin-input w-full"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"
            value={amount || ''}
            onChange={(e) => setAmount(parseInt(e.target.value) || 0)}
          />
          
          {operation === 'subtract' && amount > getCurrentBalance() && (
            <p className="text-sm text-red-600 mt-1">
              ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {getCurrentBalance()} L-Coin
            </p>
          )}
        </div>

        {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
        <div>
          <label className="block text-sm font-medium admin-text-secondary mb-2">
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ *
          </label>
          <textarea
            required
            rows={3}
            className="admin-input w-full"
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤..."
            value={comment}
            onChange={(e) => setComment(e.target.value)}
          />
        </div>

        {/* –ü—Ä–µ–≤—å—é –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        {amount > 0 && (
          <div className="p-4 rounded-lg border border-blue-200 bg-blue-50">
            <h4 className="text-sm font-medium text-blue-900 mb-2">–ü—Ä–µ–≤—å—é –æ–ø–µ—Ä–∞—Ü–∏–∏</h4>
            <div className="space-y-1 text-sm text-blue-800">
              <p>
                <strong>{getOperationText()}</strong> {amount} L-Coin {operation === 'subtract' ? '—Å' : '–Ω–∞'} {getAccountTypeText()}
              </p>
              <p>
                –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è: {getCurrentBalance()} ‚Üí {getNewBalance()} L-Coin
              </p>
              <p>
                <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {comment}
              </p>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex justify-end space-x-4 pt-4">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2"
            style={{ 
              borderColor: 'var(--divider)',
              color: 'var(--text-secondary)'
            }}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            className={`px-4 py-2 text-sm font-medium text-white rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 ${
              operation === 'add' 
                ? 'bg-green-600 hover:bg-green-700 focus:ring-green-500' 
                : 'bg-red-600 hover:bg-red-700 focus:ring-red-500'
            }`}
          >
            {getOperationText()} —Ç–æ–∫–µ–Ω—ã
          </button>
        </div>
      </form>
    </Modal>
  );
} 